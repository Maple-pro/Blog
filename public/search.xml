<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CF 618 (Div.2)</title>
    <url>/blog/2021/03/13/CF%20618%20(Div.2)/</url>
    <content><![CDATA[<h2 id="1300A-Non-zero"><a href="#1300A-Non-zero" class="headerlink" title="1300A. Non-zero*"></a>1300A. Non-zero*</h2><p>很简单，先判断数组中有多少个零，再判断数组各元素之和+零的个数是否等于零。若等于，输出零的个数+1；若不等于，输出零的个数。</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> data[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	data[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> zero_num = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; data[i];</span><br><span class="line">			sum += data[i];</span><br><span class="line">			<span class="keyword">if</span> (data[i] == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				zero_num ++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (sum + zero_num == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; zero_num + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; zero_num &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1300B-Assigning-to-Classes"><a href="#1300B-Assigning-to-Classes" class="headerlink" title="1300B. Assigning to Classes**"></a>1300B. Assigning to Classes**</h2><p>当时做的时候猜出来的结论，两个中位数的最小的差值的绝对值为 $a_{n+1}-a_{n}$，下面是证明。</p>
<p>首先对数组排序，$a_1\leq a_2 \leq \ldots \leq a_{2n}$</p>
<p>假设第一个班有$2k+1$个学生，中位数为$a_i$；第二个班有$2l+1$个学生，中位数为$a_j$。且$(2k+1)+(2l+1)=2n \Longrightarrow k+l=n-1$。设$i&lt;j$，即$a_i \leq a_j$。</p>
<p>一班中有$k+1$个同学的能力大于等于$a_i$，二班有$l+1$个同学的能力大于等于$a_j$，由于$a_i \leq a_j$，所以二班中至少有$l+1$个同学的能力大于等于$a_i$。所以至少有$k+l+2=n+1$个同学的能力大于等于$a_i$，因此$a_i \leq a_n$。</p>
<p>同理，至少有$n+1$个学生的能力小于等于$a_j$，因此$a_j \geq a_{n+1} $。</p>
<p>所以，$ |a_j-a_i|\geq a_{n+1}-a_n $。且$a_{n+1}-a_n$可以取到：把$a_n$放到一班，其他所有学生放进二班。</p>
<p>综上，只需要求出数组中第$n$大和第$n+1$大的值即可。</p>
<p>本题只需要把数组sort排序一下就行。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">2</span>*n; i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		sort(data+<span class="number">1</span>, data+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> result = data[n+<span class="number">1</span>] - data[n];</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>拓展</strong>：当然，求第k大还有复杂度更低的方法，比如利用快排中的Partition思想，还有用线段树，最小堆来求。后面再出个专题吧（挖坑中）。敬请期待！</p>
</blockquote>
<h2 id="1299A-Anu-Has-a-Function"><a href="#1299A-Anu-Has-a-Function" class="headerlink" title="1299A. Anu Has a Function**"></a>1299A. Anu Has a Function**</h2><p>事实上，$f(a,b)$可以被写为$a&amp;(\sim b)$。</p>
<p>也就是说，数组$[a_1,a_2,\ldots,a_n]$的value值为$ a_1 &amp; (\sim a_2) &amp; \ldots(\sim a_n) $。所以value的值只取决于数组中第一个值。</p>
<p>因此我们可以发现，如果设$n$个数中某一位1的个数为$m$。若$ m \geq 2$，那么value中这一位一定为0；若$m=0$，则value中这一位一定为1。</p>
<p>所以如果某一位1的个数为1，则将这个数放在第一位。为了使value最大，我们从高位往低位搜索。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>; <span class="comment">//the max size of the array</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxpos = <span class="number">35</span>; <span class="comment">//the max position of the number</span></span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxpos];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%I64d&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=<span class="number">31</span>; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (((a[i]&gt;&gt;j) &amp; <span class="number">1</span>) == <span class="number">1</span>) num[j]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> now = <span class="number">35</span>;</span><br><span class="line">	<span class="keyword">while</span> (now &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (num[now] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">		now--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> result;</span><br><span class="line">	<span class="keyword">for</span> (result=<span class="number">1</span>; result&lt;=n; result++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (((a[result]&gt;&gt;now) &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (now != <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%I64d &quot;</span>, a[result]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (i != result) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%I64d &quot;</span>, a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1299B-Aerodynamic"><a href="#1299B-Aerodynamic" class="headerlink" title="1299B. Aerodynamic"></a>1299B. Aerodynamic</h2>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>CF 620 (Div.2)</title>
    <url>/blog/2021/03/13/CF%20620%20(Div.2)/</url>
    <content><![CDATA[<p>今天被自己写的代码恶心到了……挂出来引以为戒</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">char</span> a[maxn][maxm];</span><br><span class="line"><span class="keyword">char</span> result[maxn*maxm];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> k;</span><br><span class="line">		<span class="keyword">for</span> (k=i; k&lt;=n; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[k][<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> j;</span><br><span class="line">				<span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(a[i][j] != a[k][m-j<span class="number">-1</span>])</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(j &gt;= m) <span class="keyword">break</span>;</span><br><span class="line">			&#125;	 </span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (k &gt; n)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i][<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (k == i)</span><br><span class="line">		&#123;</span><br><span class="line">			num++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			a[k][<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">			num = num + <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	length = m * num;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; length &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> r_num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i][<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				result[r_num] = a[i][j];</span><br><span class="line">				r_num++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;r_num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, result[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;r_num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, result[r_num-i<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1304A-Two-Rabbits"><a href="#1304A-Two-Rabbits" class="headerlink" title="1304A. Two Rabbits*"></a>1304A. Two Rabbits*</h2><p>没什么好说的，签到题中的签到题，直接上代码。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll x, y, a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%I64d %I64d %I64d %I64d&quot;</span>, &amp;x, &amp;y, &amp;a, &amp;b);</span><br><span class="line">		<span class="keyword">if</span>((y-x) % (a+b) == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ll round = (y-x) / (a+b);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>, round);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1304B-Longest-Palindrome"><a href="#1304B-Longest-Palindrome" class="headerlink" title="1304B. Longest Palindrome*"></a>1304B. Longest Palindrome*</h2><p>其实思路真的挺简单的，就是需要细心。</p>
<p>遍历每个字符串，判断自身是否为palindrome。如果是，将该字符串放在中间；如果不是，那么再遍历后面的字符串，判断是否有一个字符串等于其反串。如果找到了一对，分列两边输出。</p>
<p>注意输出结果中只能有一个自身为palindrome的字符串。同时本题使用<code>string</code>，并使用其<code>reverse()</code>方法。</p>
<p>还要注意有好的代码习惯，不要一堆<code>i, j, k</code>，不然会写得你崩溃。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="built_in">string</span> a[maxn];</span><br><span class="line"><span class="built_in">string</span> l[maxn];</span><br><span class="line"><span class="built_in">string</span> r[maxn];</span><br><span class="line"><span class="built_in">string</span> mid;</span><br><span class="line"><span class="keyword">bool</span> flag[maxn];</span><br><span class="line"><span class="keyword">int</span> left_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> mid_num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(flag, <span class="literal">true</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (flag[i] == <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">string</span> temp = a[i];</span><br><span class="line">		reverse(temp.begin(), temp.end());</span><br><span class="line">		<span class="keyword">if</span> (temp == a[i])</span><br><span class="line">		&#123;</span><br><span class="line">			mid = a[i];</span><br><span class="line">			<span class="keyword">if</span>(mid_num == <span class="number">0</span>) mid_num++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (flag[j] != <span class="literal">false</span> &amp;&amp; a[j] == temp)</span><br><span class="line">				&#123;</span><br><span class="line">					l[left_num] = a[i];</span><br><span class="line">					r[left_num] = a[j];</span><br><span class="line">					left_num++;</span><br><span class="line">					flag[j] = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		flag[i] = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; left_num * <span class="number">2</span> * m + mid_num * m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;left_num; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; l[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (mid_num == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; mid;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;left_num; k++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; r[left_num - k - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1304C-Air-Conditioner"><a href="#1304C-Air-Conditioner" class="headerlink" title="1304C. Air Conditioner*"></a>1304C. Air Conditioner*</h2><p>实际上是一个比较简单的贪心算法。</p>
<p>假设当前时刻温度的最大值为$big$，最小值为$small$。则经过$k$分钟后，温度的最大值为$big+k$，最小值为$small-k$。若此时温度的范围与当前时刻来的客人的温度范围有交集，则说明此时仍可满足条件，否则不满足条件。若满足条件，求取当前时刻温度的最大范围，即$big = min(big, h[i])$，$small = max(small, l[i])$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line">ll t[maxn];</span><br><span class="line">ll l[maxn];</span><br><span class="line">ll h[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">	<span class="keyword">while</span> (q--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		ll m;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; t[i] &gt;&gt; l[i] &gt;&gt; h[i];</span><br><span class="line"></span><br><span class="line">		ll big = m;</span><br><span class="line">		ll small = m;</span><br><span class="line">		ll pre_time = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			big = big + t[i] - pre_time;</span><br><span class="line">			small = small - (t[i] - pre_time);</span><br><span class="line">			<span class="keyword">if</span>(big &lt; l[i] || small &gt; h[i])</span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			pre_time = t[i];</span><br><span class="line">			<span class="keyword">if</span> (big &gt; h[i]) big = h[i];</span><br><span class="line">			<span class="keyword">if</span> (small &lt; l[i]) small = l[i]; </span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="literal">false</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1304D-Shortest-and-Longest-LIS"><a href="#1304D-Shortest-and-Longest-LIS" class="headerlink" title="1304D. Shortest and Longest LIS**"></a>1304D. Shortest and Longest LIS**</h2><p>题意即找到从$1$到$n$的两组排列。第一组排列要求其LIS的长度最小，第二组排列要求其LIS的长度最大。并要求得出的排列满足题中所给的相邻两数间的大小关系。</p>
<p>先介绍一下LIS。Longest increasing subsequence (LIS)就是指一个序列的满足下列条件的子序列：序列中的元素为升序，且尽可能长。这个子序列不要求连续，也不要求唯一。</p>
<p><strong>Shortest LIS</strong></p>
<p>让序列在整体上看为递减的即可。首先将所有连续递增的部分分组，并设这些组的最大的大小为$m$，则LIS的长度不可能小于$m$。当我们构造这个序列使得LIS的长度等于$m$时，即为所求。</p>
<p>构造方法就是让序列整体上看为递减的即可。</p>
<p><strong>Longest LIS</strong></p>
<p>让序列在整体上看为递增的即可。这样所有连续递增的部分可以可以在LIS中，每个连续递减的部分都会有一个元素在LIS中。</p>
<p>题解中还留下了一个有意思的问题，怎么使得LIS的长度等于$k$？</p>
<p>我的思路是首先分类。设所有连续递增部分的长度和为$h$，分为$h&lt;=k$和$h&gt;k$两类情况讨论。具体实现以后再来填坑（挖坑*2）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2</span>*<span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> result[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(result, <span class="number">0</span>, <span class="keyword">sizeof</span>(result));</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> pre1 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> max_num = n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i] == <span class="string">&#x27;&gt;&#x27;</span> || i == n<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&gt;=pre1; j--)</span><br><span class="line">				&#123;</span><br><span class="line">					result[j] = max_num;</span><br><span class="line">					max_num--;</span><br><span class="line">				&#125;</span><br><span class="line">				pre1 = i+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; result[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> pre2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> min_num = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">&#x27;&lt;&#x27;</span> || i == n<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&gt;=pre2; j--)</span><br><span class="line">				&#123;</span><br><span class="line">					result[j] = min_num;</span><br><span class="line">					min_num++;</span><br><span class="line">				&#125;</span><br><span class="line">				pre2 = i+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; result[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1304E-1-Trees-and-Queries"><a href="#1304E-1-Trees-and-Queries" class="headerlink" title="1304E. 1-Trees and Queries"></a>1304E. 1-Trees and Queries</h2><blockquote>
<p>太难了，等我过段时间来补</p>
</blockquote>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>CF 652 (Div.2)</title>
    <url>/blog/2021/03/13/CF%20652%20(Div.2)/</url>
    <content><![CDATA[<h2 id="A-FashionanLee"><a href="#A-FashionanLee" class="headerlink" title="A. FashionanLee*"></a>A. FashionanLee*</h2><p>签到题</p>
<p>利用凸多边形外角和为360°可得，当$ 90 \pmod{360/n} = 0 $ 时，满足要求</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-AccurateLee"><a href="#B-AccurateLee" class="headerlink" title="B. AccurateLee*"></a>B. AccurateLee*</h2><p>从左到右找第一个1，记下位置为flag1，如果整个序列都没有1，$ flag1=-1$；</p>
<p>从右到左找第一个0，记下位置为flag2，如果整个序列都没有0，$ flag2=-1$。</p>
<p>当$ flag1=-1 \bigvee flag2=-1 \bigvee flag1 &gt; flag2 $，输出整个序列；</p>
<p>否则，输出flag1左边的序列（不包含flag1）和flag2右边的序列（包含flag2）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">int</span> flag1 = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">int</span> flag2 = <span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				flag1 = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				flag2 = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (flag1 == <span class="number">-1</span> || flag2 == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (flag1 &lt; flag2)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; flag1; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = flag2; i &lt; n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-RationalLee"><a href="#C-RationalLee" class="headerlink" title="C. RationalLee"></a>C. RationalLee</h2><p>To be continue…</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>CF 661 (Div.3)</title>
    <url>/blog/2021/03/13/CF%20661%20(Div.3)/</url>
    <content><![CDATA[<blockquote>
<p>我胡汉三又回来啦，这段时间会更新题解和MIT6.828的内容，可能会更其他的学习笔记什么的</p>
</blockquote>
<h2 id="A-Remove-Smallest"><a href="#A-Remove-Smallest" class="headerlink" title="A. Remove Smallest*"></a>A. Remove Smallest*</h2><p>贪心，排序。</p>
<p>签到题。</p>
<p>把数据排序一下，然后遍历即可。</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author: Maples</span></span><br><span class="line"><span class="comment"> * @create: 2020/08/05</span></span><br><span class="line"><span class="comment"> * @contest: CF #661</span></span><br><span class="line"><span class="comment"> * @problem: A</span></span><br><span class="line"><span class="comment"> * @description: 排序</span></span><br><span class="line"><span class="comment"> * @difficulty: *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(a, a + n);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a[i + <span class="number">1</span>] - a[i]) &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-Gifts-Fixing"><a href="#B-Gifts-Fixing" class="headerlink" title="B. Gifts Fixing*"></a>B. Gifts Fixing*</h2><p>贪心。</p>
<p>签到题。</p>
<p>首先获取$ a_i $的最小值$ min(a) $和$ b_i $的最小值$ min(b) $。然后对于每一份礼物，最小步数为$ max(a_i-min(a), b_i-min(b)) $。因此，答案为$ \sum_{i=1}^{n} {max(a_i-min(a), b_i-min(b))}$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author: Maples</span></span><br><span class="line"><span class="comment"> * @create: 2020/08/05</span></span><br><span class="line"><span class="comment"> * @contest: CF #661</span></span><br><span class="line"><span class="comment"> * @problem: B</span></span><br><span class="line"><span class="comment"> * @description: 贪心</span></span><br><span class="line"><span class="comment"> * @difficulty: *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line">ll a[maxn];</span><br><span class="line">ll b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll result = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> minA = *min_element(a, a + n);</span><br><span class="line">        <span class="keyword">int</span> minB = *min_element(b, b + n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = a[i] - minA;</span><br><span class="line">            <span class="keyword">int</span> y = b[i] - minB;</span><br><span class="line">            <span class="keyword">int</span> z = <span class="built_in">std</span>::min(x, y);</span><br><span class="line">            result += x + y - z;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>Edu CF R 90 (Div.2)</title>
    <url>/blog/2021/03/13/Edu%20CF%20R%2090%20(Div.2)/</url>
    <content><![CDATA[<h2 id="A-Donut-Shops"><a href="#A-Donut-Shops" class="headerlink" title="A. Donut Shops*"></a>A. Donut Shops*</h2><p>两个临界条件：</p>
<p>买一个时如果甲店更便宜，$ x1=1 $，否则，$ x1=-1 $；</p>
<p>买$ b $件时如果乙店更便宜，$ x2=b $，否则，$ x2=-1 $。</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		ll a, b, c;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">		ll x1 = <span class="number">-1</span>;</span><br><span class="line">		ll x2 = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span> (a &lt; c)</span><br><span class="line">		&#123;</span><br><span class="line">			x1 = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a * b &gt; c)</span><br><span class="line">		&#123;</span><br><span class="line">			x2 = b;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; x1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; x2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-01Game"><a href="#B-01Game" class="headerlink" title="B. 01Game*"></a>B. 01Game*</h2><p>从最终结果来看，要么最后只剩下1，要么最后只剩下0，因此只用找到0和1个数的最小值，然后判断奇偶性即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">char</span> s[maxn];</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">		<span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">		<span class="keyword">int</span> n1 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> n2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> minn = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; len; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				n1++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				n2++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (n1 &lt;= n2)</span><br><span class="line">		&#123;</span><br><span class="line">			minn = n1;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			minn = n2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (minn % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NET&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;DA&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Pluses-and-Minuses"><a href="#C-Pluses-and-Minuses" class="headerlink" title="C. Pluses and Minuses**"></a>C. Pluses and Minuses**</h2><p>重点是理解题意。从左到右遍历字符串，当$ num(-)-num(+)&gt;cur $时，$ cur=cur+1 $，同时从头开始再次遍历。输出为遍历的字符的个数。</p>
<p>我们采用动态规划算法，算法复杂度为O(n)。从左到右遍历字符串，当$ num(-)-num(+)&gt;cur $时，$ cur=num(-)-num(+) $，记下此时的结果，$ ans+=i+1 $。然后不用重头开始，可以继续遍历。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	ll ans;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">		ans = s.length();</span><br><span class="line">		ll sum = <span class="number">0</span>;</span><br><span class="line">		ll res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">&#x27;+&#x27;</span>) sum++;</span><br><span class="line">			<span class="keyword">else</span> sum--;</span><br><span class="line">			<span class="keyword">if</span> (sum &lt; res)</span><br><span class="line">			&#123;</span><br><span class="line">				res = sum;</span><br><span class="line">				ans += i + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Maximum-Sum-on-Even-Positions"><a href="#D-Maximum-Sum-on-Even-Positions" class="headerlink" title="D. Maximum Sum on Even Positions"></a>D. Maximum Sum on Even Positions</h2><p>To be continue…</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>Java学习：1. Introduction to Java</title>
    <url>/blog/2021/03/13/Java%E5%AD%A6%E4%B9%A0%EF%BC%9A1-Introduction-to-Java/</url>
    <content><![CDATA[<h1 id="1-1-A-Typical-Java-Development-Environment"><a href="#1-1-A-Typical-Java-Development-Environment" class="headerlink" title="1.1 A Typical Java Development Environment"></a>1.1 A Typical Java Development Environment</h1><h2 id="1-1-1-The-steps-to-create-and-execute-a-Java-application"><a href="#1-1-1-The-steps-to-create-and-execute-a-Java-application" class="headerlink" title="1.1.1 The steps to create and execute a Java application"></a>1.1.1 The steps to create and execute a Java application</h2><p><strong>Phase 1: Edit</strong><br>Program is created in an editor and <strong>stored on disk</strong> in a file whose name ends with <em><strong>.java</strong></em></p>
<span id="more"></span>

<p><strong>Phase 2: Compile</strong><br>Compiler creates <strong>bytecodes</strong> and <strong>stores them on disk</strong> in a file whose name ends with <em><strong>.class</strong></em> ( .class文件的个数取决于类的个数，而不是.java文件的个数）</p>
<p><strong>Phase 3: Load</strong><br><strong>Class loader</strong> reads <em><strong>.class</strong></em> files containing bytecodes from disk and <strong>puts those bytecodes in memory</strong><br>load 后，类定义以<strong>class类的对象</strong>的形式存储在内存中</p>
<p><strong>Phase 4: Verify</strong><br><strong>Bytecode verifier</strong> confirms that all bytecodes are valid and do not violate Java’s security restrictions</p>
<p><strong>Phase 5: Execution</strong><br>To execute the program, the <strong>JVM</strong> reads bytecodes and <strong>just-in-time(JIT)</strong> <strong>compiles(translates)</strong> them into a language that the computer can understand. As the program executes, it may store data values in <strong>primary memory</strong></p>
<h2 id="1-1-2-Tips"><a href="#1-1-2-Tips" class="headerlink" title="1.1.2 Tips"></a>1.1.2 Tips</h2><ul>
<li><em><strong>.class</strong></em> 以 Java Bytecode 的形式存储</li>
<li>在 Ececution 阶段，JVM 既有 interpreter，也有compile。JVM 在解释的同时也有动态/即时编译，即 JIT Compile。(hot spot)</li>
</ul>
<h1 id="1-2-Java-Characteristics"><a href="#1-2-Java-Characteristics" class="headerlink" title="1.2 Java Characteristics"></a>1.2 Java Characteristics</h1><ul>
<li><strong>Simple</strong></li>
<li><strong>Secure</strong></li>
<li><strong>Portable</strong></li>
<li><strong>Robust</strong></li>
<li><strong>Object-oriented</strong></li>
<li><strong>Architecture-neutral</strong></li>
<li><strong>Multithreaded (多线程的)</strong><br>进程 process —-&gt; 线程 thread（多个线程并发）</li>
<li><strong>Interpreted (解释性的)</strong></li>
<li><strong>High performance(高性能的)</strong></li>
<li><strong>Distributed(分布式的)</strong><br>Java was designed with the distributed environment. It can be transmit, run over the internet.</li>
<li><strong>Dynamic(动态的)</strong><br>Class loader 将类动态加载如JVM中</li>
</ul>
<h1 id="1-3-Different-from-C"><a href="#1-3-Different-from-C" class="headerlink" title="1.3 Different from C++"></a>1.3 Different from C++</h1><table>
<tbody>
<tr>
<th>Features</th>
<th>C++</th>
<th>Java</th>
</tr>
<tr>
<td>pointer</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>goto Statement</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>unsigned Data Types</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Operator Overloading</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Preprocessor Directives (#define)</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Multiple Inheritance</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Memory Management</td>
<td>Explicit ( 显式 )</td>
<td>Implicit ( 隐式 )</td>
</tr>
<tr>
<td>Structures Concept</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody>
</table>

<ul>
<li>C++支持多继承，Java不支持多继承</li>
<li>C++为显式的内存管理，Java为隐式的内存管理</li>
<li>Memory Leak（内存泄漏）: 当没有用的内存没有释放的时候，会造成内存泄漏。C++需要手动释放内存，Java中的JVM自动管理内存。Java程序仍然存在内存泄漏，但要比C++少很多</li>
<li>判断一个内存是否应当回收：有无指针指向这片内存（寻找GC Roots）</li>
</ul>
<h1 id="1-4-Others"><a href="#1-4-Others" class="headerlink" title="1.4 Others"></a>1.4 Others</h1><h2 id="1-4-1-Java-Class-Libraries"><a href="#1-4-1-Java-Class-Libraries" class="headerlink" title="1.4.1 Java Class Libraries"></a>1.4.1 Java Class Libraries</h2><ul>
<li>Java programs consist of pieces called <strong>classes</strong></li>
<li>Classed include <strong>methods</strong> that perform tasks and return information when the tasks complete</li>
<li><strong>Java class libraries</strong></li>
<li>Rich collections of existing classes</li>
<li>Also known as the <strong>Java APIs</strong></li>
</ul>
<h2 id="1-4-2-Program-Languages"><a href="#1-4-2-Program-Languages" class="headerlink" title="1.4.2 Program Languages"></a>1.4.2 Program Languages</h2><ul>
<li><strong>Imperative（命令式的）</strong>: C, C++, Java, …</li>
</ul>
<ul>
<li>下达命令时很清晰，明确指定方法的步骤</li>
<li>问题：冯·诺依曼瓶颈</li>
</ul>
<ul>
<li><strong>Functional（函数式的）</strong>: SQL( 非过程化的语言 ）, …</li>
</ul>
<ul>
<li>这一类语言特点是将函数当变量用，类似Lambda Expressions</li>
</ul>
<ul>
<li><strong>Logical（逻辑式的）</strong></li>
</ul>
<h2 id="1-4-3-Class-类"><a href="#1-4-3-Class-类" class="headerlink" title="1.4.3 Class 类"></a>1.4.3 Class 类</h2><ul>
<li><strong>Instance of class</strong> represent classes and interfaces in a running Java application.</li>
<li>class类没有构造函数，class类的对象是Class Loader在load .class 文件时产生的，不能手动new一个</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Java学习：3. Methods</title>
    <url>/blog/2021/03/13/Java%E5%AD%A6%E4%B9%A0%EF%BC%9A3.%20Methods/</url>
    <content><![CDATA[<h1 id="3-1-Method-Call-Stack-and-Activation-Records"><a href="#3-1-Method-Call-Stack-and-Activation-Records" class="headerlink" title="3.1 Method-Call Stack and Activation Records"></a>3.1 Method-Call Stack and Activation Records</h1><h2 id="3-1-1-Stack-data-structure"><a href="#3-1-1-Stack-data-structure" class="headerlink" title="3.1.1 Stack data structure"></a>3.1.1 Stack data structure</h2><ul>
<li><p><strong>Pushing</strong>: Placing a dish on the pile at the top</p>
</li>
<li><p><strong>Popping</strong>: Removing a dish from the pile from the top</p>
</li>
<li><p><strong>LIFO</strong> data structures: The last item pushed(inserted) on the stack is the first item popped(removed) from the stack. (<strong>last-in, first-out</strong>)</p>
</li>
<li><span id="more"></span>
<h2 id="3-1-2-Activation-Records"><a href="#3-1-2-Activation-Records" class="headerlink" title="3.1.2 Activation Records"></a>3.1.2 Activation Records</h2></li>
<li><p>When a program calls a method, the called method must know how to return to its caller</p>
<ul>
<li>The <strong>return address</strong> of the calling method is pushed onto the <strong>method-call stack</strong></li>
</ul>
</li>
<li><p>If a series of method calls occurs, the successive return addresses are pushed onto the stack in last-on, first-out order</p>
</li>
<li><p>The <strong>method-call stack</strong> also contains <strong>the memory for the local variables</strong> used in each invocation of a method during a program’s execution</p>
<ul>
<li>Stored as a portion of the program-execution stack known as the <strong>activation record</strong> or <strong>stack frame</strong> of the method call</li>
</ul>
</li>
<li><p>When a <strong>method call</strong> is made, the <strong>stack frame</strong> for that method call is <strong>pushed</strong> onto the <strong>method-call stack</strong></p>
</li>
<li><p>When the <strong>method returns</strong> to its caller, the method’s activation record is <strong>popped off</strong> the stack and those local variables are no longer known to the program</p>
</li>
<li><p>If more method calls occurs than can have their stack frames stored on the method-call stack, an error known as a <strong>stack overflow</strong> occurs</p>
</li>
<li><p><strong>overflow</strong>与<strong>内存</strong>有关</p>
</li>
<li><p>栈有大小限制</p>
</li>
<li><p>对于stack空间，是根据方法的调用与返回来管理的，<strong>不需要GC</strong></p>
</li>
<li><p>stack保存了方法的调用关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Demo.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		f();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">		f();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//java.lang.StackoverflowError</span></span><br></pre></td></tr></table></figure></li>
<li><p>main() -&gt; a() -&gt; b() -&gt; c() 在一个<strong>线程</strong>中，</p>
</li>
<li><p>一个java程序在运行时，有多少个<strong>线程</strong>就需要多少个<strong>栈</strong>，每个线程都有自己的栈空间</p>
</li>
<li><p>一个栈中的方法可以跨对象，即一个线程中的方法可以跨对象，<strong>线程只与方法有关</strong>。因为方法不知道什么叫对象，非静态方法在实现时将<strong>this指针</strong> 首先压入栈中。</p>
<h1 id="3-2-Constructors"><a href="#3-2-Constructors" class="headerlink" title="3.2 Constructors"></a>3.2 Constructors</h1><h2 id="3-2-1-普通构造函数"><a href="#3-2-1-普通构造函数" class="headerlink" title="3.2.1 普通构造函数"></a>3.2.1 普通构造函数</h2></li>
<li><p><strong>Roles</strong> of the constructors：<strong>Initializing objects</strong>，instand of requesting memory.</p>
</li>
<li><p>Java requies a <strong>constructor</strong> that <strong>initializes an object</strong> of a class <strong>when the object is created</strong>.</p>
</li>
<li><p>Keyword <strong>new</strong> <strong>requests memory</strong> from the system to store an object, then calls the corresponding class’s <strong>constructor</strong> to <strong>initialize</strong> the object.</p>
</li>
<li><p>A constructor must have <strong>the same name</strong> as the class.</p>
</li>
<li><p>By default, the <strong>compiler</strong> provides a <strong>default constructor</strong> with <strong>no paramaters</strong> in any class that does not explicitly include a constructor. ( 默认构造函数的访问范围与类的访问范围相同 )</p>
<ul>
<li>Instance variables are initialized to their <strong>default values</strong>.</li>
</ul>
</li>
<li><p>A constructor’s <strong>parameter list</strong> specifies the data it requires to perform its task. </p>
</li>
<li><p>Constructors <strong>can’t return values</strong>, so they cannot specify a return type.</p>
</li>
<li><p>If you declare any constructors for a class, the Java compiler will not create a default constructor for that class.</p>
<h2 id="3-2-2-静态构造函数"><a href="#3-2-2-静态构造函数" class="headerlink" title="3.2.2 静态构造函数"></a>3.2.2 静态构造函数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Demo.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;  <span class="comment">//静态构造函数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>静态构造函数的<strong>功能</strong>：对<strong>类</strong>初始化，通常用于初始化类的<strong>静态成员变量</strong></p>
</li>
<li><p>调用时间：在<strong>类定义被load到内存中</strong>时，调用了静态构造函数，而不管有无类的对象</p>
</li>
<li><p>不管有多少个对象，都只会调用<strong>一次</strong>静态构造函数</p>
</li>
<li><p>如果在类中没有自己定义构造函数，框架会为我们生成一个默认构造函数；同样的，如果我们在类中定义了静态变量，而我们又没有定义静态构造函数，那么框架也会生成一个静态构造函数供我们调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Emp.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Emp</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Emp e1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不会加载类定义，即不会调用静态构造函数；没有创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Emp.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Emp</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Emp e1 = <span class="keyword">new</span> Emp();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会加载类定义，调用了静态构造函数；创建了对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Emp.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Emp</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Emp e1;</span><br><span class="line">		Class.forName(<span class="string">&quot;Emp&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会加载类定义，调用了静态构造函数；没有创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类定义的加载与对象的创建是分开的</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果一个类加载器只加载一个类，且方法区不做垃圾回收，则静态初始化只做一次</p>
</li>
<li><p>静态构造方法只会有一个，如果写了多个，编译器会将其合在一起</p>
</li>
<li><p>在字节码中，普通构造函数的函数名均为<em>init</em>，静态构造函数的函数名为<em>Cinit</em></p>
<h2 id="3-2-3-私有构造函数"><a href="#3-2-3-私有构造函数" class="headerlink" title="3.2.3 私有构造函数"></a>3.2.3 私有构造函数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Emp.java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Emp mInstance = <span class="keyword">new</span> Emp();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mInstance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Emp</span><span class="params">()</span></span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Emp e1 = Emp.getInstance();</span><br></pre></td></tr></table></figure></li>
<li><p>Emp这个类<strong>只有一个</strong>对象   <strong>Singleton</strong></p>
</li>
<li><p>mInstance存储在<strong>class类的对象</strong>中</p>
</li>
<li><p>即便没有<code>Emp e1 = Emp.getInstance();</code>，仍然会创建出对象</p>
</li>
<li><p>若方法区不做垃圾回收，mInstance不会被当成垃圾，有可能造成<strong>内存泄漏</strong>；<em>useless but reachable</em></p>
</li>
<li><p><strong>Singleto &amp; Multiton</strong></p>
<ul>
<li><strong>Singleton</strong>（单例模式）：通过定义私有的构造函数，使从单例类的外部无法初始化该类，从而确保该类只有一个实例</li>
<li><strong>Multiton</strong>（多例模式）：该类有多个实例，且从类的外部无法初始化该类</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Emp.java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Emp mInstance = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>( mInstance == <span class="keyword">null</span> ) mInstance = <span class="keyword">new</span> Emp();</span><br><span class="line">		<span class="keyword">return</span> mInstance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Emp</span><span class="params">()</span></span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Emp e1 = Emp.getInstance();</span><br></pre></td></tr></table></figure>

<ul>
<li>若没有<code>Emp e1 = Emp.getInstance();</code>，没有对象会被创建<h1 id="3-3-Others"><a href="#3-3-Others" class="headerlink" title="3.3 Others"></a>3.3 Others</h1><h2 id="3-3-1-instanceof-和-getClass"><a href="#3-3-1-instanceof-和-getClass" class="headerlink" title="3.3.1 instanceof() 和 getClass()"></a>3.3.1 instanceof() 和 getClass()</h2>比较两个对象是否同属于一个类时，可以使用<code>instanceof()</code>和<code>getClass()</code>方法。但二者在判断上是有区别的：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInstanceof</span><span class="params">(Object x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;x instanceof Parent:  &quot;</span>+(x <span class="keyword">instanceof</span> Parent));</span><br><span class="line">		System.out.println(<span class="string">&quot;x instanceof Child:  &quot;</span>+(x <span class="keyword">instanceof</span> Child));</span><br><span class="line">		System.out.println(<span class="string">&quot;x getClass Parent:  &quot;</span>+(x.getClass() == Parent.class));</span><br><span class="line">		System.out.println(<span class="string">&quot;x getClass Child:  &quot;</span>+(x.getClass() == Child.class));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		testInstanceof(<span class="keyword">new</span> Parent());</span><br><span class="line">		System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">		testInstanceof(<span class="keyword">new</span> Child());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">x instanceof Parent:  true</span></span><br><span class="line"><span class="comment">x instanceof Child:  false</span></span><br><span class="line"><span class="comment">x getClass Parent:  true</span></span><br><span class="line"><span class="comment">x getClass Child:  false</span></span><br><span class="line"><span class="comment">---------------------------</span></span><br><span class="line"><span class="comment">x instanceof Parent:  true</span></span><br><span class="line"><span class="comment">x instanceof Child:  true</span></span><br><span class="line"><span class="comment">x getClass Parent:  false</span></span><br><span class="line"><span class="comment">x getClass Child:  true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>instanceof()</code>：你是否属于<strong>该类或该类的派生类</strong>，考虑继承关系</p>
</li>
<li><p><code>getClass()</code>：不考虑继承关系</p>
<h2 id="3-3-2-Override-and-Overload"><a href="#3-3-2-Override-and-Overload" class="headerlink" title="3.3.2 Override and Overload"></a>3.3.2 Override and Overload</h2></li>
<li><p><strong>Override（重写）</strong>：覆盖一个方法并对其重写</p>
<ul>
<li>子类的方法与父类的方法的方法名、参数和返回值完全相同，即<strong>方法的标志完全相同</strong></li>
<li>是<strong>多态性</strong>的表现</li>
<li>通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了</li>
<li>子类方法的<strong>访问权限</strong>只能比父类的更大，不能更小</li>
<li>如果父类的方法是private类型，那么，子类则不存在覆盖的限制，相当于子类中增加了一个全新的方法</li>
<li>编译时编译器决定调用哪个函数（early blinding）</li>
<li><code>@Override</code>：一个<em>annotation</em>，告诉编译器接下来将要对方法进行重写，也可以不写；如果接下来没有重写方法，编译器会报错</li>
</ul>
</li>
<li><p><strong>Overload（重载）</strong>：</p>
<ul>
<li>表示一个类中可以有多个相同名称的方法，但这些方法的<strong>参数列表</strong>各不相同</li>
<li>如果两个方法的参数列表完全一样，不能通过其<strong>返回值类型</strong>来实现重载。因为Java无法通过返回类型来判断调用哪个方法</li>
<li>不能通过<strong>访问范围</strong>进行重载</li>
<li>对于继承来说，如果某一方法在父类中是访问权限是priavte，那么就不能在子类对其进行重载，如果定义的话，也只是定义了一个新方法，而不会达到重载的效果</li>
<li>调用哪个方法由运行时的环境决定，在运行时绑定（late blinding）<h2 id="3-3-3-Others"><a href="#3-3-3-Others" class="headerlink" title="3.3.3 Others"></a>3.3.3 Others</h2><h3 id="一、定义初始化和构造初始化"><a href="#一、定义初始化和构造初始化" class="headerlink" title="一、定义初始化和构造初始化"></a>一、定义初始化和构造初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Emp.java</span></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> eid = <span class="number">10</span>;  <span class="comment">//定义初始化，初始化语句不在构造函数内</span></span><br><span class="line">	Emp(<span class="keyword">int</span> eid)&#123;</span><br><span class="line">	<span class="keyword">this</span>.eid = eid;  <span class="comment">//构造初始化，初始化语句在构造函数内</span></span><br><span class="line">	&#125;</span><br><span class="line">	Emp()&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Emp.class中对应于两条初始化语句</span></span><br><span class="line"> Emp(<span class="keyword">int</span> eid);</span><br><span class="line">     <span class="number">0</span>  aload_0 [<span class="keyword">this</span>]</span><br><span class="line">     <span class="number">1</span>  invokespecial java.lang.Object() [<span class="number">14</span>]</span><br><span class="line">     <span class="number">4</span>  aload_0 [<span class="keyword">this</span>]</span><br><span class="line">     <span class="number">5</span>  bipush <span class="number">10</span></span><br><span class="line">     <span class="number">7</span>  putfield test.Emp.eid : <span class="keyword">int</span> [<span class="number">16</span>]</span><br><span class="line">    <span class="number">10</span>  aload_0 [<span class="keyword">this</span>]</span><br><span class="line">    <span class="number">11</span>  iload_1 [eid]</span><br><span class="line">    <span class="number">12</span>  putfield test.Emp.eid : <span class="keyword">int</span> [<span class="number">16</span>]</span><br><span class="line">Emp();</span><br><span class="line">     <span class="number">0</span>  aload_0 [<span class="keyword">this</span>]</span><br><span class="line">     <span class="number">1</span>  invokespecial java.lang.Object() [<span class="number">14</span>]</span><br><span class="line">     <span class="number">4</span>  aload_0 [<span class="keyword">this</span>]</span><br><span class="line">     <span class="number">5</span>  bipush <span class="number">10</span></span><br><span class="line">     <span class="number">7</span>  putfield test.Emp.eid : <span class="keyword">int</span> [<span class="number">16</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>定义初始化语句在编译后，会放到所有的构造函数的最前面</p>
</li>
<li><p>每一段代码的执行都是由方法调用而来的，不会游离于方法之外</p>
<h3 id="二、this-1"><a href="#二、this-1" class="headerlink" title="二、this(1)"></a>二、this(1)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Emp.java</span></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;</span><br><span class="line">	Emp(<span class="keyword">int</span> eid)&#123;</span><br><span class="line">	<span class="keyword">this</span>.eid = eid;  </span><br><span class="line">	&#125;</span><br><span class="line">	Emp()&#123;</span><br><span class="line">	<span class="keyword">this</span>(<span class="number">1</span>);  <span class="comment">//在一个构造函数中调用另外一个构造函数，即调用Emp（int eid)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>this</strong>:</p>
<ul>
<li>类似于指针，<code>this.eid = eid</code></li>
<li><code>this(1)</code>：在一个构造函数中调用另外一个构造函数<h3 id="三、声明变长参数的方法"><a href="#三、声明变长参数的方法" class="headerlink" title="三、声明变长参数的方法"></a>三、声明变长参数的方法</h3></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>... x)</span></span>&#123;</span><br><span class="line">	System.out.println(x.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">[I</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>int... x</code>：实际上，参数是一个int类型的数组<h3 id="四、传参"><a href="#四、传参" class="headerlink" title="四、传参"></a>四、传参</h3></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Demo.java</span></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		list.add(<span class="number">1</span>);</span><br><span class="line">		System.out.println(list.size());</span><br><span class="line">		addElement(list);</span><br><span class="line">		System.out.println(list.size());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(List&lt;Integer&gt; L)</span></span>&#123;   <span class="comment">//传入的是L的地址</span></span><br><span class="line">		L.add(<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Java中传参只有传值，上面的代码穿的是L的地址，本质上还是在传值</p>
<h3 id="五、静态函数和静态成员变量"><a href="#五、静态函数和静态成员变量" class="headerlink" title="五、静态函数和静态成员变量"></a>五、静态函数和静态成员变量</h3><ul>
<li>static与非static方法的区别：<ul>
<li>static方法：没有this变量</li>
<li>非static方法：有this变量，先将this压入栈中</li>
<li>都在方法区</li>
</ul>
</li>
<li>静态的方法不能访问非静态的成员变量<ul>
<li>因为静态方法没有this指针</li>
</ul>
</li>
<li>非静态方法可以访问静态成员变量<h3 id="六、流程控制语句"><a href="#六、流程控制语句" class="headerlink" title="六、流程控制语句"></a>六、流程控制语句</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">20</span>; i++)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2: for(声明循环变量: 数组名)&#123;&#125;</span></span><br><span class="line"><span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i: ints)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(key)&#123;</span><br><span class="line"><span class="keyword">case</span> value:</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String country = <span class="string">&quot;xx&quot;</span></span><br><span class="line"><span class="keyword">switch</span>(country)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;China&quot;</span>:</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;USA&quot;</span>:</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Java中switch语句的value可以为String类型</span></span><br></pre></td></tr></table></figure>
<h4 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h4><ul>
<li><strong>break</strong>：在switch或loop外部中断（中止当前所在的循环语句）</li>
<li><strong>continue</strong>：中止本次循环，开始下一次循环</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		outer: <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">			inner: <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">2</span>; j++)&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span> outer;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以通过标记中止外层循环</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Java学习：2. Basic Java Grammar</title>
    <url>/blog/2021/03/13/Java%E5%AD%A6%E4%B9%A0%EF%BC%9A2.%20Basic%20Java%20Grammar/</url>
    <content><![CDATA[<h1 id="2-1-Data-Type"><a href="#2-1-Data-Type" class="headerlink" title="2.1 Data Type"></a>2.1 Data Type</h1><h2 id="2-1-1-基本数据类型"><a href="#2-1-1-基本数据类型" class="headerlink" title="2.1.1 基本数据类型"></a>2.1.1 基本数据类型</h2><p>数值类型：byte, short, int, long, float, double<br>其它类型：char, boolean<br>（无unsigned类型）</p>
<span id="more"></span>

<h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><ul>
<li>一个char有两个字节；采用UCS-4字符集，UTF-8编码方案；</li>
<li>charset（字符集）：将字符与数值一一对应；</li>
<li>ASCⅡ：一个字符对应一个字节的编码；</li>
<li>GB2312：一个字符对应两个字节的编码；</li>
<li>Unicode：一个字符对应四个字节的编码，但表示时用两个字节，英文编码变为双字节，高字节补零；<h2 id="2-1-2-引用数据类型"><a href="#2-1-2-引用数据类型" class="headerlink" title="2.1.2 引用数据类型"></a>2.1.2 引用数据类型</h2><h3 id="一、JVM内存结构"><a href="#一、JVM内存结构" class="headerlink" title="一、JVM内存结构"></a>一、JVM内存结构</h3><img src="https://img-blog.csdnimg.cn/20190920235826175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA0MjI3MA==,size_16,color_FFFFFF,t_70" alt="JVM内存结构"><h3 id="二、Java程序在内存中的位置"><a href="#二、Java程序在内存中的位置" class="headerlink" title="二、Java程序在内存中的位置"></a>二、Java程序在内存中的位置</h3></li>
</ul>
<p><em>person.class</em> 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">person p1, p2;</span><br></pre></td></tr></table></figure>
<ul>
<li><em>person.class</em> 被load至内存区时，在方法区（<strong>meta space</strong>）中创建<strong>class类的对象</strong>；</li>
<li>person类的对象p1, p2在<strong>Java堆</strong>中创建，并由指针指向方法区中class类的对象；</li>
<li>object类是所有类的基类，<em>object</em> 类中有<em>getclass()</em> 方法，可以找到对象所属的类；<table>
<tbody>
<tr>
<th></th>
<th>局部变量</th>
<th>成员变量</th>
</tr>
<tr>
<td>基本数据类型</td>
<td>变量名和值都在方法区</td>
<td>变量名和值在堆内存中</td>
</tr>
<tr>
<td>引用数据类型</td>
<td>变量在方法栈，变量指向的对象在堆</td>
<td>变量名和变量名指向的对象都在堆</td>
</tr>
</tbody>
</table></li>
<li>Java堆中有GC，方法区中没有GC，为持久代（Permanent generation）；</li>
<li>类的方法在编译后生成一系列指令，放入<strong>方法区</strong><h2 id="2-1-3-Others"><a href="#2-1-3-Others" class="headerlink" title="2.1.3 Others"></a>2.1.3 Others</h2><h3 id="一、包装类"><a href="#一、包装类" class="headerlink" title="一、包装类"></a>一、包装类</h3></li>
<li>8种基本数据类型不是面向对象的，没有对应的类，但每个基本数据类型都有对应的<strong>包装类</strong>（Wrapper Class）</li>
<li><strong>包装类</strong>：Byte, Short, Integer, Character, Long, Float, Double</li>
<li><strong>自动装箱/拆箱</strong>（Auto Boxing/Unboxing）:8种基本数据类型与其包装类会自动相互转换</li>
<li>包装类是<strong>不变类</strong>，是不可更改的（Immutable）</li>
<li>为什么使用不变类：<ul>
<li>线程<strong>安全</strong>的，由于不变类的状态在创建后不会发生改变，所以可以进行线程间的数据共享，不需要同步</li>
<li>不变类的instance可以被<strong>重复使用</strong>(reuse)</li>
</ul>
</li>
<li><strong>类型转换</strong><ul>
<li>int -&gt; long (true)</li>
<li>Integer -&gt; Long (false): Integer类与Long类没有继承关系</li>
<li><code>Integer a = new Long();</code>: 错误<h3 id="二、Examples"><a href="#二、Examples" class="headerlink" title="二、Examples"></a>二、Examples</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">12</span>;</span><br><span class="line">Integer i2 = i1;</span><br><span class="line">i2 = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//此时 i1 = 12; i2 = 100;</span></span><br><span class="line"><span class="comment">//即此时有2个对象，因为包装类是不变类</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">10</span>;</span><br><span class="line">Integer i1 = <span class="number">10</span>;  <span class="comment">//此处有Auto Boxing</span></span><br><span class="line">Integer i2 = <span class="number">10</span>;</span><br><span class="line">System.out.println(i1 == i2)</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//&quot;==&quot;比较的是地址，即现在只有一个对象（重用）</span></span><br><span class="line"><span class="comment">//当x &lt;= 127时，为true，有一个对象；当x &gt; 128时，为false，有两个对象</span></span><br></pre></td></tr></table></figure>
<h3 id="三、静态方法"><a href="#三、静态方法" class="headerlink" title="三、静态方法"></a>三、静态方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在调用时，<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Demo.f();</span><br><span class="line"><span class="comment">//静态方法在实现时没有this参数，不会管是由谁调用的，与类的实例无关</span></span><br><span class="line"><span class="keyword">new</span> Demo().g();</span><br><span class="line"><span class="comment">//非静态方法在实现时会将this参数传入，aload_0[this]，将Demo的对象传入g()方法中</span></span><br></pre></td></tr></table></figure>
<h3 id="四、import和package"><a href="#四、import和package" class="headerlink" title="四、import和package"></a>四、import和package</h3></li>
</ul>
</li>
<li><strong>import</strong></li>
<li><code>import java.io.File</code></li>
<li><code>import java.lang.*</code>会自动加上，不用写</li>
<li><strong>package</strong></li>
<li><code>Package a.b.c</code></li>
<li>包与目录是相结合的，控制访问范围</li>
<li>当没有访问范围修饰符时，限定在包内访问<h3 id="五、其它"><a href="#五、其它" class="headerlink" title="五、其它"></a>五、其它</h3></li>
<li>比较<ul>
<li>== 比较的是物理上的，即比较的是地址</li>
<li>若要比较内容，则需重写equals()方法</li>
</ul>
</li>
<li>Javadoc Comments<ul>
<li><code>/**           */</code></li>
<li>Java.doc会将其转换为HTML文件</li>
</ul>
</li>
<li>文件名<ul>
<li>一个Java文件只能最多有一个public class，文件名就是类名</li>
<li>若无public class，也可任取一个top level的类名</li>
<li>top level的类只能用public或无</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Java学习：4. Array and Collection</title>
    <url>/blog/2021/03/13/Java%E5%AD%A6%E4%B9%A0%EF%BC%9A4.%20Array%20and%20Collection/</url>
    <content><![CDATA[<h1 id="4-1-枚举"><a href="#4-1-枚举" class="headerlink" title="4.1 枚举"></a>4.1 枚举</h1><span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		turnTo(Direction.EAST);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">turnTo</span><span class="params">(Direction direction)</span></span>&#123;</span><br><span class="line">		<span class="keyword">switch</span>(direction)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> EAST:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> WEST:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Direction</span></span>&#123; EAST, WEST &#125;; <span class="comment">//枚举</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-1-1-枚举的实现"><a href="#4-1-1-枚举的实现" class="headerlink" title="4.1.1 枚举的实现"></a>4.1.1 枚举的实现</h2><p>编译后内部实现的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承java.lang.Enum并声明为final</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Direction</span> <span class="keyword">extends</span> <span class="title">Enum</span></span>&#123;</span><br><span class="line">	<span class="comment">/*枚举类型的常量*/</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction EAST;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction WEST;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction[] $VALUES;<span class="comment">//values使用数组进行存储</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Direction</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name, ordinal);</span><br><span class="line">	&#125;<span class="comment">//私有构造函数，外部无法实例化</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Direction[] values()&#123;</span><br><span class="line">		<span class="keyword">return</span> (Direction[])$VALUES.clone();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Direction <span class="title">valueOf</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (Direction)Enum.valueOf(Direction, name);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		EAST = <span class="keyword">new</span> Direction(<span class="string">&quot;EAST&quot;</span>, <span class="number">0</span>);</span><br><span class="line">		WEST = <span class="keyword">new</span> Direction(<span class="string">&quot;WEST&quot;</span>, <span class="number">1</span>);</span><br><span class="line">		$VALUES = ( <span class="keyword">new</span> Direction[] &#123; EAST, WEST &#125; );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Java中枚举实际上是一个特殊的类，编译后会生成相对应的<code>.class</code>文件<code>Demo$Direction.class</code>，是<strong>多例模式（Multiton）</strong></p>
</blockquote>
<h2 id="4-1-2-匿名的内部类"><a href="#4-1-2-匿名的内部类" class="headerlink" title="4.1.2 匿名的内部类"></a>4.1.2 匿名的内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">Direction</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">		EAST(<span class="number">1</span>), WEST(<span class="number">10</span>)&#123;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">int</span> did;</span><br><span class="line">		Direction(<span class="keyword">int</span> i)&#123;</span><br><span class="line">			did=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>WEST(10)&#123; &#125;;</code>在编译后会生成<code>Demo$Direction$1.class</code>，是Direction类的子类（匿名的内部类）；同时也是Direction类的实例</p>
</blockquote>
<h1 id="4-2-Array"><a href="#4-2-Array" class="headerlink" title="4.2 Array"></a>4.2 Array</h1><h2 id="4-2-1-Overview"><a href="#4-2-1-Overview" class="headerlink" title="4.2.1 Overview"></a>4.2.1 Overview</h2><ul>
<li>Data structures consisting of related data items of the <strong>same type</strong>.</li>
<li>Arrays are objects so they are <strong>reference type</strong>.</li>
<li>Elements can be either <strong>primitive</strong> or <strong>reference</strong> types.</li>
<li><strong>Remain</strong> the same <strong>length</strong> once they are created.</li>
<li><strong>Variable-length arguments lists</strong>: can create methods are with varying numbers of arguments.</li>
<li>Process command-line <em>arguments</em> in method <strong>main</strong>.</li>
<li>Common array manipulations with <em><strong>static</strong></em> methods of class <strong>Arrays</strong> from the <code>java.utill</code> package.</li>
<li>数组本身是一个<strong>对象</strong>，其中也可以存放对象，object类是数组类的父类</li>
<li>一维数组中的元素存放在<strong>连续</strong>的存储空间中；多维数组的元素在内存中不连续<ul>
<li>Java：Jagged Array 锯齿状的数组，多维数组存放在<strong>非连续的内存</strong>中，因此<code>ints[0].length</code>与<code>ints[1].length</code>可以不同</li>
<li>C++：Rregular Array 整齐的数组，多维数组存放在<strong>连续的内存</strong>中，因此<code>ints[0].length</code>与<code>ints[1].length</code>必须相同</li>
</ul>
</li>
<li> Java数组是一种<strong>引用</strong>数据类型。数组变量并不是数组本身，而是指向<strong>堆内存</strong>中存放的数组对象。因此，可以改变一个数组变量所引用的数组<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Object类是Array类的父类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">	System.out.println(ints.getClass().getSuperclass().get.Name());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Output</span></span><br><span class="line">java.lang.Object</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-2-2-数组的声明"><a href="#4-2-2-数组的声明" class="headerlink" title="4.2.2 数组的声明"></a>4.2.2 数组的声明</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*一维数组*/</span></span><br><span class="line"><span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];<span class="comment">//数组的动态初始化；必须要声明数组的大小；Java中默认初始化为0</span></span><br><span class="line"><span class="keyword">int</span>[] ints = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;<span class="comment">//数组的静态初始化</span></span><br><span class="line">String[] strs = <span class="keyword">new</span> String[<span class="number">4</span>];<span class="comment">//对象数组声明后，数组中每一个类对象仍然为空</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i: ints)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ints.length; i++)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>java数组是<strong>静态</strong>的，必须初始化后才可以使用，一旦初始化数组长度，长度是<strong>不可以改变</strong>的</li>
<li><strong>动态初始化</strong> &amp; <strong>静态初始化</strong>：<ul>
<li>静态初始化：初始化时由程序员显式指定每个数组元素的初始值，由系统决定数组的长度</li>
<li>动态初始化：初始化时指定数组的长度，此时已经分配内存</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*二维数组*/</span></span><br><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">4</span>][<span class="number">3</span>] <span class="comment">//声明方式1</span></span><br><span class="line"><span class="keyword">int</span>[][] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">ints[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">ints[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; <span class="comment">//声明方式2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] i: a)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j: i)&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="comment">//遍历方式1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.length; i++&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a[i].length; j++)&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="comment">//遍历方式2</span></span><br></pre></td></tr></table></figure>
<h1 id="4-3-Colletion"><a href="#4-3-Colletion" class="headerlink" title="4.3 Colletion"></a>4.3 Colletion</h1><p><img src="https://img-blog.csdnimg.cn/20191019223739604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA0MjI3MA==,size_16,color_FFFFFF,t_70" alt="Java集合框架图"></p>
<blockquote>
<ul>
<li>实线边框：实现类            </li>
<li> 折线边框：抽象类            </li>
<li> 点线边框：接口</li>
</ul>
</blockquote>
<p>具体内容参见：<br><a href="https://blog.csdn.net/biexiaofei/article/details/77031003">集合继承关系图解</a><br><a href="https://blog.csdn.net/diweikang/article/details/88381601">Java集合框架关系图</a></p>
<h2 id="4-3-1-Overview"><a href="#4-3-1-Overview" class="headerlink" title="4.3.1 Overview"></a>4.3.1 Overview</h2><ul>
<li>Collection本身是一个<strong>接口</strong>（<em>interface</em>），不是一个类</li>
<li>Collection中不可能存放基本数据类型：向ArrayList中放入100时，会先变为Integer类</li>
<li>底层实现的数据结构由程序员决定，可以通过数组实现，也可以通过链表实现</li>
<li>集合的大小并不确定</li>
<li>Collection分为List，Set，Queue：<ul>
<li><strong>List</strong>：元素之间有顺序，可以有重复项<ul>
<li> <strong>ArrayList</strong>：底层由<strong>数组</strong>实现</li>
<li> <strong>LinkedList</strong>：底层由<strong>链表</strong>实现</li>
</ul>
</li>
<li><strong>Set</strong>：元素之间没有顺序，不可以有重复项<ul>
<li><strong>HashSet</strong></li>
<li><strong>TreeSet</strong></li>
</ul>
</li>
<li><strong>Queue</strong></li>
</ul>
</li>
<li><strong>Collection</strong> &amp; <strong>Collections</strong><ul>
<li><strong>Collection</strong>：泛型的<strong>接口</strong>，接口中无法定义具体的方法（即带有方法体的方法），只能定义抽象方法；但在java1.8后可以在接口中定义具体的方法，无需在伴生类中定义</li>
<li><strong>Collections</strong>：工具类，是Collection的<strong>伴生类</strong>，其中全部为<strong>静态方法</strong>，不用创造对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-2-ArrayList"><a href="#4-3-2-ArrayList" class="headerlink" title="4.3.2 ArrayList"></a>4.3.2 ArrayList</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		list.add(<span class="number">1</span>);</span><br><span class="line">		list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">		list.get(<span class="number">0</span>);</span><br><span class="line">		System.out.println(list.size());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>基于<strong>动态数组</strong>的一个List，底层用<code>Object[]</code>来存储</li>
<li>其中封装了很多方法，如<code>add()</code>，<code>get()</code>方法</li>
<li><strong>特点</strong>：插入、删除元素很麻烦，但可以实现随机访问<h2 id="4-3-3-LinkedList"><a href="#4-3-3-LinkedList" class="headerlink" title="4.3.3 LinkedList"></a>4.3.3 LinkedList</h2></li>
<li>基于<strong>链表</strong>的一个List</li>
<li><strong>特点</strong>：插入、删除简便，但不能随机访问<h2 id="4-3-4-HashSet"><a href="#4-3-4-HashSet" class="headerlink" title="4.3.4 HashSet"></a>4.3.4 HashSet</h2></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="equals-amp-hashCode"><a href="#equals-amp-hashCode" class="headerlink" title="equals() &amp; hashCode()"></a>equals() &amp; hashCode()</h3><p>&emsp;&emsp;Set集合中不允许出现相同的项，Set集合在用<code>Add()</code>方法添加一个新项时，首先会调用<code>equals(Object o)</code>方法来比较新项与已有的某项是否相等，而不是用<code>==</code>来判断相等性。对于字符串等已重写<code>equals()</code>方法的类，是按值来比较其相等性的。<br>&emsp;&emsp;在set类型的集合中，如何判断元素是否重复呢，这就需要使用<code>Object.equals()</code>方法，但如果元素很多了，添加一个新元素时，比较的次数 就很多，例如已经有100个元素了，添加第101个元素时，就要和前面的元素比较100次，效率很低。</p>
<p>&emsp;&emsp;<strong>HashSet</strong>类用<strong>哈希算法</strong>作为搜索算法来存取对象，当向集合中加入一个新对象时，会调用对象的<code>hashCode()</code>方法得到对象的哈希码，从而判断两个对象是否相等，复杂度为O(1)。</p>
<blockquote>
<p>哈希算法也称为散列算法，是将数据依据算法直接指定到一个地址上，<code>hashCode()</code>实际上返回的是对象存储的物理地址。<br><strong>Object类</strong>中定义了<code>hashCode()</code>和<code>equals(Object o)</code>方法,如果<code>object1.equals(object2)</code>，那么说明这两个引用变量指向同一个对象，那么object1和object2的hashCode也一定相等。</p>
</blockquote>
<p><a href="https://blog.csdn.net/kangguowei/article/details/82458265">重写equals和hashCode</a></p>
<p>调用<code>set.add()</code>时，先用<code>hashCode()</code>方法，再对哈希码相同的对象调用<code>equals()</code>方法</p>
<blockquote>
<p>只用<code>equals()</code>方法：效率低<br>只用<code>hashCode()</code>方法：不可靠</p>
</blockquote>
<h2 id="4-3-5-TreeSet"><a href="#4-3-5-TreeSet" class="headerlink" title="4.3.5 TreeSet"></a>4.3.5 TreeSet</h2><h3 id="一、Comparable-amp-Comparator"><a href="#一、Comparable-amp-Comparator" class="headerlink" title="一、Comparable &amp; Comparator"></a>一、Comparable &amp; Comparator</h3><ul>
<li><strong>Comparable</strong></li>
<li> <strong>Packaga</strong> <code>java.lang</code></li>
<li> Interface Comparable<T></li>
<li>This ordering is referred to as the class’s natural ordering, and the class’s <strong>compareTo</strong> method is referred to as its natural comparison method.（自然排序算法）</li>
<li><code>int compareTo(T o)</code>：有this参数</li>
<li><strong>Comparator</strong></li>
<li><strong>Package</strong> <code>java.util</code></li>
<li>public interface Comparator<T></li>
<li><code>int compare(T o1, T o2)</code>：没有this参数</li>
<li>所使用的Comparator可以是当前类的，也可以是其父类的（泛型编程）<blockquote>
<p>List之间的区别：底层实现的数据结构不同<br>Set之间的区别：底层的数据结构以及搜索算法不同</p>
</blockquote>
<h3 id="二、构造函数"><a href="#二、构造函数" class="headerlink" title="二、构造函数"></a>二、构造函数</h3><table>
<thead>
<tr>
<th>Constructor</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>TreeSet()</td>
<td>Constructs a new, empty tree set, sorted according to the <strong>natural ordering</strong> of its elements.</td>
</tr>
<tr>
<td>TreeSet (Collection&lt;? extends E&gt; c)</td>
<td>Constructs a new tree set containing the elements in the specified collection, sorted according to the <strong>natural ordering</strong> of its elements.</td>
</tr>
<tr>
<td>TreeSet (Comparator&lt;? super E&gt; comparator)</td>
<td>Constructs a new, empty tree set, sorted according to the <strong>specified comparator</strong>.</td>
</tr>
<tr>
<td>TreeSet (SortedSet<E> s&gt;)</td>
<td>Constructs a new tree set comtaining the same elements and using the <strong>same ordering</strong> as the specified sorted set.</td>
</tr>
</tbody></table>
<h3 id="三、Brief-Introduction"><a href="#三、Brief-Introduction" class="headerlink" title="三、Brief Introduction"></a>三、Brief Introduction</h3></li>
<li>放入TreeSet的对象一定要能比较大小</li>
<li>同一类型及其子类型的对象可以放入一个TreeSet</li>
<li>默认采用自然排序（Comparable的<code>compareTo()</code>方法）</li>
<li>可以重写<code>compareTo()</code>或new不同的Comparator</li>
</ul>
<h2 id="4-3-6-TreeMap-amp-HashMap"><a href="#4-3-6-TreeMap-amp-HashMap" class="headerlink" title="4.3.6 TreeMap &amp; HashMap"></a>4.3.6 TreeMap &amp; HashMap</h2><blockquote>
<p>public interface Map&lt;K, V&gt;<br>Map不属于Collection<br>Map中的一个key和一个value构成一个entry<br><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code> 会产生一个set</p>
</blockquote>
<ul>
<li> Map这个接口取代了Dictionary这个类</li>
<li>TreeMap和HashMap的区别在于查找算法的不同</li>
</ul>
<h1 id="4-4-Array和Collection的区别"><a href="#4-4-Array和Collection的区别" class="headerlink" title="4.4 Array和Collection的区别"></a>4.4 Array和Collection的区别</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="comment">/*Example1*/</span></span><br><span class="line">		Person p = <span class="keyword">new</span> Emp(); <span class="comment">//p仍然为Person类的对象</span></span><br><span class="line">		Emp e = <span class="keyword">null</span>;</span><br><span class="line">		p = e; <span class="comment">//yes</span></span><br><span class="line">		e = p; <span class="comment">//no</span></span><br><span class="line">		e = (Emp)p; <span class="comment">//yes （如果没有继承关系，则no）</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*Example2*/</span></span><br><span class="line">		List&lt;Person&gt; plist = <span class="keyword">null</span>;</span><br><span class="line">		List&lt;Emp&gt; emplist = <span class="keyword">null</span>;</span><br><span class="line">		plist = emplist; <span class="comment">//no</span></span><br><span class="line">		emplist = plist; <span class="comment">//no</span></span><br><span class="line">		g(emplist); <span class="comment">//no</span></span><br><span class="line">		<span class="comment">//Person与Emp有继承关系，但plist与emplist没有继承关系，集合为invariant不变的</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*Example3*/</span></span><br><span class="line">		Person[] persons = <span class="keyword">null</span>;</span><br><span class="line">		Emp[] emps = <span class="keyword">null</span>;</span><br><span class="line">		persons = emps; <span class="comment">//yes</span></span><br><span class="line">		emps = persons; <span class="comment">//no</span></span><br><span class="line">		f(emps) <span class="comment">//yes</span></span><br><span class="line">		<span class="comment">//Person类是Emp类的父类，persons也是emps的父类，数组为covariant协变的</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(Persons[] persons)</span></span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(List&lt;Person&gt; plist)</span></span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Array</strong>：covariant 协变的<br><strong>Collection</strong>：invariant 不变的<br>&nbsp;&nbsp;&nbsp;&nbsp;（contravariant 逆变的）</p>
</blockquote>
<ul>
<li>为什么不把集合做成协变的？<ul>
<li>集合中有<strong>类型擦除</strong>，所以若集合是协变的，则有可能add不属于该集合的对象进入</li>
<li>而数组没有类型擦除，所以在编译时便会报错</li>
</ul>
</li>
<li>Java泛型编程中可以利用一些机制达到协变的效果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//协变返回：通过编译后产生的桥方法实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="function">Emp <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-5-Iterator"><a href="#4-5-Iterator" class="headerlink" title="4.5 Iterator"></a>4.5 Iterator</h1><blockquote>
<p>public interface Iterator<E><br>This interface is a member of the Java Collections Framework</p>
</blockquote>
<ul>
<li>循环遍历是通过Iterator来实现的，通过Iterable中的<code>iterator()</code>方法获得迭代器</li>
<li>要使用Iterator必须要是iterable的</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/2021/03/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>建站记录</title>
    <url>/blog/2021/03/13/site-records/</url>
    <content><![CDATA[<h2 id="域名和服务器选择"><a href="#域名和服务器选择" class="headerlink" title="域名和服务器选择"></a>域名和服务器选择</h2><blockquote>
<p>域名在<a href="https://www.namesilo.com/">NameSilo</a>上买的，一年7刀（网上可以找到优惠码，可以优惠1刀）。服务器在[Vultr](https://    <a href="http://www.vultr.com)上买的,走的日本线路,最便宜的那种,一个月5刀./">www.vultr.com)上买的，走的日本线路，最便宜的那种，一个月5刀。</a></p>
</blockquote>
<p>这么简单的东西我居然也能踩坑，我也是服了。</p>
<span id="more"></span>

<pre><code>    首先，如果域名和服务器其中一个是在国内整的，那么就需要备案。So，要么都买国内的，要么都买国外的。国内速度快，不过需要备案，备案挺快的；国外的速度没那么快，不过可以用服务器来整点活，而且不需要备案。

    国内的话服务器可以买阿里云、华为云、腾讯云、百度云的，他们有学生优惠，比如阿里云10元/月。国外服务器的话，可以网上搜，比如Vultr、Linode等。Vultr上新手注册可以领100刀，但是要从特定的网址那里注册，还有一些其他的优惠。我的服务器速度也不太快，就不推荐了。

    之后就是把域名解析到IP地址上，服务器在哪里买的就在那里整，大概15分钟后就可以了。
</code></pre>
<h2 id="远程连接服务器安装WordPress"><a href="#远程连接服务器安装WordPress" class="headerlink" title="远程连接服务器安装WordPress"></a>远程连接服务器安装WordPress</h2><p>下载安装Xshell，新建会话，填写用户名和密码等（在购买的服务器的详细信息上会有）。这样就远程连接到服务器了。</p>
<h2 id="安装nginx，-MySQL，PHP，WordPress"><a href="#安装nginx，-MySQL，PHP，WordPress" class="headerlink" title="安装nginx， MySQL，PHP，WordPress"></a>安装nginx， MySQL，PHP，WordPress</h2><p><a href="https://blog.csdn.net/qq874455953/article/details/81603241">教程</a></p>
<h2 id="WordPress插件"><a href="#WordPress插件" class="headerlink" title="WordPress插件"></a>WordPress插件</h2><p><strong>Crayon Syntax Highlighter （Crayon语法显示）</strong>：代码高亮显示</p>
<p><strong>Jetpack</strong>：支持markdown，latex的输入，以及网站统计等强大的功能</p>
<p><strong>LaTeX2HTML</strong>：支持latex的输入，这个插件的公式渲染会比较好</p>
<p><strong>Mammoth .docx converter</strong>：支持将word文档作为文章输入</p>
<p><strong>ThirstyAffiliates</strong>：快速生成短链接（不过我也没怎么用过）</p>
<p><strong>UpdraftPlus-备份/恢复</strong>：备份和恢复网站，升级还能迁移网站     </p>
<p><strong>WP Tabel Tag Gen</strong>：输入表格</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>主题</strong>：Kratos</p>
<p><strong>字体样式</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Helvetica Neue&quot;</span>,Helvetica,Arial,<span class="string">&quot;Microsoft Yahei&quot;</span>,<span class="string">&quot;Hiragino Sans GB&quot;</span>,<span class="string">&quot;Heiti SC&quot;</span>,<span class="string">&quot;WenQuanYi Micro Hei&quot;</span>,sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>表格样式</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;</span><br><span class="line">        <span class="attribute">border-collapse</span>:collapse;</span><br><span class="line">        <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">        <span class="attribute">margin</span>:auto;</span><br><span class="line">	      <span class="attribute">text-align</span>:center;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>用的是WordPress模板，没有自己整活，缺少了那种感觉。</p>
<p>也没有弄清Linux系统、和网站前后端的东西。</p>
<p>以后还会用这个服务器整点其他活（这个坑我挖下了，看我什么时候填起来）</p>
<p>敬请期待！</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
  </entry>
  <entry>
    <title>武汉大学新生寒假集训---Day5</title>
    <url>/blog/2021/03/13/%E6%AD%A6%E6%B1%89%E5%A4%A7%E5%AD%A6%E6%96%B0%E7%94%9F%E5%AF%92%E5%81%87%E9%9B%86%E8%AE%AD---Day5/</url>
    <content><![CDATA[<blockquote>
<p>开始写题解了，一方面做一个记录，一方面督促自己。奥里给！<br>题号后的 * 为难度系数</p>
</blockquote>
<h2 id="A-Solving-Order"><a href="#A-Solving-Order" class="headerlink" title="A. Solving Order*"></a>A. Solving Order*</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5702">HDU - 5702</a><br>结构体排序</p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">problem</span>&#123;</span></span><br><span class="line">	<span class="built_in">string</span> color;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> problem &amp;p1, <span class="keyword">const</span> problem &amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> p1.num &gt; p2.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--)</span><br><span class="line">	&#123;</span><br><span class="line">		problem p[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; p[i].color &gt;&gt; p[i].num;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		sort (p, p+n, comp);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; p[i].color &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; p[n<span class="number">-1</span>].color;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-Luck-Compition"><a href="#B-Luck-Compition" class="headerlink" title="B. Luck Compition*"></a>B. Luck Compition*</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5704">HDU - 5704</a><br>公式推导</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> N;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">		<span class="keyword">int</span> summ = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> num[maxn];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N<span class="number">-1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">			summ = summ + num [i];		</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">double</span> stand = <span class="number">2</span> * (<span class="keyword">double</span>)summ / (<span class="keyword">double</span>)(<span class="number">3</span> * N <span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> i;    <span class="comment">//最后的结果</span></span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=<span class="number">100</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i &gt; stand)</span><br><span class="line">			&#123;</span><br><span class="line">				i--;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(num[j] == i) a++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">double</span> per;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="number">0</span>) per = <span class="number">1.00</span>;</span><br><span class="line">		<span class="keyword">else</span> per = <span class="number">1</span>/(<span class="keyword">double</span>)a;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span>.setf(ios::fixed);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>) &lt;&lt; per &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="F-N-Again"><a href="#F-N-Again" class="headerlink" title="F. N! Again*"></a>F. N! Again*</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2674">HDU - 2674</a><br>暑假集训的时候还做过，还是我想出来的，怎么就忘了呢……<br>因为$ 2019 = 7 * 7 * 41 $<br>所以$ N \geq 41 $时，结果都为0<br>因此只用考虑$ N &lt; 41 $的情况</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> N;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;N) != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (N &gt;= <span class="number">41</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (N == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			ans = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				ans = (ans * i) % <span class="number">2009</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="G-god-is-a-girl"><a href="#G-god-is-a-girl" class="headerlink" title="G. god is a girl*"></a>G. god is a girl*</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2672">HDU - 2672</a><br>找规律，斐波那契数列<br>每个字母项加上对应的斐波那契数列的值，非字母项不变<br>卡在了终止循环的条件上……看来字符串类型的输入还是要整明白<br>还有就是斐波那契数列要转换一下，不然会爆<code>long long </code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">char</span> sen[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> fib[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fib[<span class="number">0</span>] = <span class="number">1</span>; fib[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;maxn; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		fib[i] = (fib[i<span class="number">-1</span>] + fib[i<span class="number">-2</span>]) % <span class="number">26</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(gets(sen) != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> len = <span class="built_in">strlen</span>(sen);</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (sen[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; sen[i] &lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				sen[i] = <span class="string">&#x27;A&#x27;</span> - <span class="number">1</span> + (sen[i] + fib[count] - <span class="string">&#x27;A&#x27;</span> + <span class="number">1</span>) % <span class="number">26</span>;</span><br><span class="line">				count ++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; sen &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>All categories</title>
    <url>/blog/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>All tags</title>
    <url>/blog/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/README.html</url>
    <content><![CDATA[<h1 align="center"><a href="https://github.com/HubSpot/pace">Progress bar</a> for <a href="https://github.com/theme-next">NexT</a></h1>

<h1 align="center">Installation</h1>

<h2>If you want to use the CDN instead of clone this repo, please jump to the Step 3.</h2>

<h2 align="center">Step 1 &rarr; Go to NexT dir</h2>

<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ ls</span><br><span class="line">_config.yml  crowdin.yml  docs  gulpfile.js  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class="built_in">source</span></span><br></pre></td></tr></table></figure>

<h2 align="center">Step 2 &rarr; Get module</h2>

<p>Install module to <code>source/lib</code> directory:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>

<h2 align="center">Step 3 &rarr; Set it up</h2>

<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file and select your theme:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure>

<p><strong>And, if you wants to use the CDN, then need to set:</strong> (you also need to find your corresponding theme css link in <a href="https://www.jsdelivr.com/package/npm/pace-js?path=themes">jsdelivr</a>)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">pace:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1/pace.min.js</span></span><br><span class="line">  <span class="attr">pace_css:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1/themes/blue/pace-theme-minimal.css</span></span><br></pre></td></tr></table></figure>

<h1 align="center">Update</h1>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next/<span class="built_in">source</span>/lib/pace</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-barber-shop.min.css</url>
    <content><![CDATA[.pace,.pace .pace-progress{width:100%;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;height:12px;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#29d;position:fixed;top:0;bottom:0;right:100%}.pace .pace-activity{right:-32px;bottom:0;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,rgba(255,255,255,.2)),color-stop(.25,transparent),color-stop(.5,transparent),color-stop(.5,rgba(255,255,255,.2)),color-stop(.75,rgba(255,255,255,.2)),color-stop(.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);-webkit-background-size:32px 32px;-moz-background-size:32px 32px;-o-background-size:32px 32px;background-size:32px 32px;-webkit-animation:pace-theme-barber-shop-motion .5s linear infinite;-moz-animation:pace-theme-barber-shop-motion .5s linear infinite;-ms-animation:pace-theme-barber-shop-motion .5s linear infinite;-o-animation:pace-theme-barber-shop-motion .5s linear infinite;animation:pace-theme-barber-shop-motion .5s linear infinite}@-webkit-keyframes pace-theme-barber-shop-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-32px,0);transform:translate(-32px,0)}}@-moz-keyframes pace-theme-barber-shop-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-32px,0);transform:translate(-32px,0)}}@-o-keyframes pace-theme-barber-shop-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-32px,0);transform:translate(-32px,0)}}@-ms-keyframes pace-theme-barber-shop-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-32px,0);transform:translate(-32px,0)}}@keyframes pace-theme-barber-shop-motion{0%{transform:none}100%{transform:translate(-32px,0)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-big-counter.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{position:fixed;z-index:2000;top:0;right:0;height:5rem;width:5rem;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:after{display:block;position:absolute;top:0;right:.5rem;content:attr(data-progress-text);font-family:"Helvetica Neue",sans-serif;font-weight:100;font-size:5rem;line-height:1;text-align:right;color:rgba(34,153,221,.19999999999999996)}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-bounce.min.css</url>
    <content><![CDATA[.pace{width:140px;height:300px;position:fixed;top:-90px;right:-20px;z-index:2000;-webkit-transform:scale(0);-moz-transform:scale(0);-ms-transform:scale(0);-o-transform:scale(0);transform:scale(0);opacity:0;-webkit-transition:all 2s linear 0s;-moz-transition:all 2s linear 0s;transition:all 2s linear 0s}.pace.pace-active{-webkit-transform:scale(.25);-moz-transform:scale(.25);-ms-transform:scale(.25);-o-transform:scale(.25);transform:scale(.25);opacity:1}.pace .pace-activity{width:140px;height:140px;border-radius:70px;background:#29d;position:absolute;top:0;z-index:1911;-webkit-animation:pace-bounce 1s infinite;-moz-animation:pace-bounce 1s infinite;-o-animation:pace-bounce 1s infinite;-ms-animation:pace-bounce 1s infinite;animation:pace-bounce 1s infinite}.pace .pace-progress{position:absolute;display:block;left:50%;bottom:0;z-index:1910;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-transform:scaleY(.3)!important;-moz-transform:scaleY(.3)!important;-ms-transform:scaleY(.3)!important;-o-transform:scaleY(.3)!important;transform:scaleY(.3)!important;-webkit-animation:pace-compress .5s infinite alternate;-moz-animation:pace-compress .5s infinite alternate;-o-animation:pace-compress .5s infinite alternate;-ms-animation:pace-compress .5s infinite alternate;animation:pace-compress .5s infinite alternate}@-webkit-keyframes pace-bounce{0%,100%,95%{top:0;-webkit-animation-timing-function:ease-in}50%{top:140px;height:140px;-webkit-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-webkit-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-bounce{0%,100%,95%{top:0;-moz-animation-timing-function:ease-in}50%{top:140px;height:140px;-moz-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-moz-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-moz-animation-timing-function:ease-out}}@keyframes pace-bounce{0%,100%,95%{top:0;animation-timing-function:ease-in}50%{top:140px;height:140px;animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;animation-timing-function:ease-out}}@-webkit-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-moz-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-moz-animation-timing-function:ease-out}}@keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;animation-timing-function:ease-out}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-center-circle.min.css</url>
    <content><![CDATA[.pace,.pace .pace-progress{z-index:2000;left:0;top:0;height:6rem}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-perspective:12rem;-moz-perspective:12rem;-ms-perspective:12rem;-o-perspective:12rem;perspective:12rem;position:fixed;width:6rem;margin:auto;right:0;bottom:0}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{display:block;position:absolute;width:6rem!important;line-height:6rem;font-size:2rem;border-radius:50%;background:rgba(34,153,221,.8);color:#fff;font-family:"Helvetica Neue",sans-serif;font-weight:100;text-align:center;-webkit-animation:pace-theme-center-circle-spin linear infinite 2s;-moz-animation:pace-theme-center-circle-spin linear infinite 2s;-ms-animation:pace-theme-center-circle-spin linear infinite 2s;-o-animation:pace-theme-center-circle-spin linear infinite 2s;animation:pace-theme-center-circle-spin linear infinite 2s;-webkit-transform-style:preserve-3d;-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d;-o-transform-style:preserve-3d;transform-style:preserve-3d}.pace .pace-progress:after{content:attr(data-progress-text);display:block}@-webkit-keyframes pace-theme-center-circle-spin{from{-webkit-transform:rotateY(0)}to{-webkit-transform:rotateY(360deg)}}@-moz-keyframes pace-theme-center-circle-spin{from{-moz-transform:rotateY(0)}to{-moz-transform:rotateY(360deg)}}@-ms-keyframes pace-theme-center-circle-spin{from{-ms-transform:rotateY(0)}to{-ms-transform:rotateY(360deg)}}@-o-keyframes pace-theme-center-circle-spin{from{-o-transform:rotateY(0)}to{-o-transform:rotateY(360deg)}}@keyframes pace-theme-center-circle-spin{from{transform:rotateY(0)}to{transform:rotateY(360deg)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-center-atom.min.css</url>
    <content><![CDATA[.pace,.pace .pace-progress{z-index:2000;height:60px;width:100px}.pace .pace-activity,.pace .pace-progress:before{border-radius:50%;display:block;position:absolute}.pace.pace-inactive{display:none}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace .pace-progress{position:absolute;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:before{content:attr(data-progress-text);text-align:center;color:#fff;background:#29d;font-family:"Helvetica Neue",sans-serif;font-size:14px;font-weight:100;line-height:1;padding:20% 0 7px;width:50%;height:40%;margin:10px 0 0 30px;z-index:999}.pace .pace-activity{font-size:15px;line-height:1;z-index:2000;-webkit-animation:pace-theme-center-atom-spin 2s linear infinite;-moz-animation:pace-theme-center-atom-spin 2s linear infinite;-o-animation:pace-theme-center-atom-spin 2s linear infinite;animation:pace-theme-center-atom-spin 2s linear infinite;border:5px solid #29d;content:' ';top:0;left:0;height:60px;width:100px}.pace .pace-activity:after,.pace .pace-activity:before{content:' ';display:block;position:absolute;top:-5px;left:-5px;height:60px;width:100px}.pace .pace-activity:after{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(60deg);-moz-transform:rotate(60deg);-o-transform:rotate(60deg);transform:rotate(60deg)}.pace .pace-activity:before{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(120deg);-moz-transform:rotate(120deg);-o-transform:rotate(120deg);transform:rotate(120deg)}@-webkit-keyframes pace-theme-center-atom-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes pace-theme-center-atom-spin{0%{-moz-transform:rotate(0)}100%{-moz-transform:rotate(359deg)}}@-o-keyframes pace-theme-center-atom-spin{0%{-o-transform:rotate(0)}100%{-o-transform:rotate(359deg)}}@keyframes pace-theme-center-atom-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-center-radar.min.css</url>
    <content><![CDATA[.pace,.pace .pace-activity{z-index:2000;height:90px;width:90px}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace.pace-inactive .pace-activity{display:none}.pace .pace-activity,.pace .pace-activity:before{position:absolute;display:block;border-color:#29d transparent transparent;border-radius:50%}.pace .pace-activity{left:-30px;top:-30px;border-width:30px;border-style:double;-webkit-animation:spin 1s linear infinite;-moz-animation:spin 1s linear infinite;-o-animation:spin 1s linear infinite;animation:spin 1s linear infinite}.pace .pace-activity:before{content:' ';top:10px;left:10px;height:50px;width:50px;border-width:10px;border-style:solid}@-webkit-keyframes spin{100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes spin{100%{-moz-transform:rotate(359deg)}}@-o-keyframes spin{100%{-moz-transform:rotate(359deg)}}@keyframes spin{100%{transform:rotate(359deg)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-center-simple.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0;height:5px;width:200px;background:#fff;border:1px solid #29d;overflow:hidden}.pace .pace-progress{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);max-width:200px;z-index:2000;display:block;position:absolute;top:0;right:100%;height:100%;width:100%;background:#29d}.pace.pace-inactive{display:none}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-corner-indicator.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:0;right:0;width:300px;height:300px;background:#29d;-webkit-transition:-webkit-transform .3s;transition:transform .3s;-webkit-transform:translateX(100%) translateY(-100%) rotate(45deg);transform:translateX(100%) translateY(-100%) rotate(45deg);pointer-events:none}.pace.pace-active .pace-activity{-webkit-transform:translateX(50%) translateY(-50%) rotate(45deg);transform:translateX(50%) translateY(-50%) rotate(45deg)}.pace .pace-activity::after,.pace .pace-activity::before{-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;bottom:30px;left:50%;display:block;border:5px solid #fff;border-radius:50%;content:''}.pace .pace-activity::before{margin-left:-40px;width:80px;height:80px;border-right-color:rgba(0,0,0,.2);border-left-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 3s linear infinite;animation:pace-theme-corner-indicator-spin 3s linear infinite}.pace .pace-activity::after{bottom:50px;margin-left:-20px;width:40px;height:40px;border-top-color:rgba(0,0,0,.2);border-bottom-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 1s linear infinite;animation:pace-theme-corner-indicator-spin 1s linear infinite}@-webkit-keyframes pace-theme-corner-indicator-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@keyframes pace-theme-corner-indicator-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-flash.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}.pace .pace-progress-inner{display:block;position:absolute;right:0;width:100px;height:100%;box-shadow:0 0 10px #29d,0 0 5px #29d;opacity:1;-webkit-transform:rotate(3deg) translate(0,-4px);-moz-transform:rotate(3deg) translate(0,-4px);-ms-transform:rotate(3deg) translate(0,-4px);-o-transform:rotate(3deg) translate(0,-4px);transform:rotate(3deg) translate(0,-4px)}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:15px;right:15px;width:14px;height:14px;border:2px solid transparent;border-top-color:#29d;border-left-color:#29d;border-radius:10px;-webkit-animation:pace-spinner .4s linear infinite;-moz-animation:pace-spinner .4s linear infinite;-ms-animation:pace-spinner .4s linear infinite;-o-animation:pace-spinner .4s linear infinite;animation:pace-spinner .4s linear infinite}@-webkit-keyframes pace-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-moz-keyframes pace-spinner{0%{-moz-transform:rotate(0);transform:rotate(0)}100%{-moz-transform:rotate(360deg);transform:rotate(360deg)}}@-o-keyframes pace-spinner{0%{-o-transform:rotate(0);transform:rotate(0)}100%{-o-transform:rotate(360deg);transform:rotate(360deg)}}@-ms-keyframes pace-spinner{0%{-ms-transform:rotate(0);transform:rotate(0)}100%{-ms-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes pace-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-fill-left.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background-color:rgba(34,153,221,.19999999999999996);position:fixed;z-index:-1;top:0;right:100%;bottom:0;width:100%}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-flat-top.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;top:0;left:0;width:100%;-webkit-transform:translate3d(0,-50px,0);-ms-transform:translate3d(0,-50px,0);transform:translate3d(0,-50px,0);-webkit-transition:-webkit-transform .5s ease-out;-ms-transition:-webkit-transform .5s ease-out;transition:transform .5s ease-out}.pace.pace-active{-webkit-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.pace .pace-progress{display:block;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:10px;background:#29d;pointer-events:none}
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-loading-bar.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-border-radius:10px;-moz-border-radius:10px;border-radius:10px;-webkit-background-clip:padding-box;-moz-background-clip:padding;background-clip:padding-box;z-index:2000;position:fixed;margin:auto;top:12px;left:0;right:0;bottom:0;width:200px;height:50px;overflow:hidden}.pace .pace-progress{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;-webkit-background-clip:padding-box;-moz-background-clip:padding;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);display:block;position:absolute;right:100%;margin-right:-7px;width:93%;top:7px;height:14px;font-size:12px;background:#29d;color:#29d;line-height:60px;font-weight:700;font-family:Helvetica,Arial,"Lucida Grande",sans-serif;-webkit-box-shadow:120px 0 #fff,240px 0 #fff;-ms-box-shadow:120px 0 #fff,240px 0 #fff;box-shadow:120px 0 #fff,240px 0 #fff}.pace .pace-progress:after{content:attr(data-progress-text);display:inline-block;position:fixed;width:45px;text-align:right;right:0;padding-right:16px;top:4px}.pace .pace-progress[data-progress-text="0%"]:after{right:-200px}.pace .pace-progress[data-progress-text="1%"]:after{right:-198.14px}.pace .pace-progress[data-progress-text="2%"]:after{right:-196.28px}.pace .pace-progress[data-progress-text="3%"]:after{right:-194.42px}.pace .pace-progress[data-progress-text="4%"]:after{right:-192.56px}.pace .pace-progress[data-progress-text="5%"]:after{right:-190.7px}.pace .pace-progress[data-progress-text="6%"]:after{right:-188.84px}.pace .pace-progress[data-progress-text="7%"]:after{right:-186.98px}.pace .pace-progress[data-progress-text="8%"]:after{right:-185.12px}.pace .pace-progress[data-progress-text="9%"]:after{right:-183.26px}.pace .pace-progress[data-progress-text="10%"]:after{right:-181.4px}.pace .pace-progress[data-progress-text="11%"]:after{right:-179.54px}.pace .pace-progress[data-progress-text="12%"]:after{right:-177.68px}.pace .pace-progress[data-progress-text="13%"]:after{right:-175.82px}.pace .pace-progress[data-progress-text="14%"]:after{right:-173.96px}.pace .pace-progress[data-progress-text="15%"]:after{right:-172.1px}.pace .pace-progress[data-progress-text="16%"]:after{right:-170.24px}.pace .pace-progress[data-progress-text="17%"]:after{right:-168.38px}.pace .pace-progress[data-progress-text="18%"]:after{right:-166.52px}.pace .pace-progress[data-progress-text="19%"]:after{right:-164.66px}.pace .pace-progress[data-progress-text="20%"]:after{right:-162.8px}.pace .pace-progress[data-progress-text="21%"]:after{right:-160.94px}.pace .pace-progress[data-progress-text="22%"]:after{right:-159.08px}.pace .pace-progress[data-progress-text="23%"]:after{right:-157.22px}.pace .pace-progress[data-progress-text="24%"]:after{right:-155.36px}.pace .pace-progress[data-progress-text="25%"]:after{right:-153.5px}.pace .pace-progress[data-progress-text="26%"]:after{right:-151.64px}.pace .pace-progress[data-progress-text="27%"]:after{right:-149.78px}.pace .pace-progress[data-progress-text="28%"]:after{right:-147.92px}.pace .pace-progress[data-progress-text="29%"]:after{right:-146.06px}.pace .pace-progress[data-progress-text="30%"]:after{right:-144.2px}.pace .pace-progress[data-progress-text="31%"]:after{right:-142.34px}.pace .pace-progress[data-progress-text="32%"]:after{right:-140.48px}.pace .pace-progress[data-progress-text="33%"]:after{right:-138.62px}.pace .pace-progress[data-progress-text="34%"]:after{right:-136.76px}.pace .pace-progress[data-progress-text="35%"]:after{right:-134.9px}.pace .pace-progress[data-progress-text="36%"]:after{right:-133.04px}.pace .pace-progress[data-progress-text="37%"]:after{right:-131.18px}.pace .pace-progress[data-progress-text="38%"]:after{right:-129.32px}.pace .pace-progress[data-progress-text="39%"]:after{right:-127.46px}.pace .pace-progress[data-progress-text="40%"]:after{right:-125.6px}.pace .pace-progress[data-progress-text="41%"]:after{right:-123.74px}.pace .pace-progress[data-progress-text="42%"]:after{right:-121.88px}.pace .pace-progress[data-progress-text="43%"]:after{right:-120.02px}.pace .pace-progress[data-progress-text="44%"]:after{right:-118.16px}.pace .pace-progress[data-progress-text="45%"]:after{right:-116.3px}.pace .pace-progress[data-progress-text="46%"]:after{right:-114.44px}.pace .pace-progress[data-progress-text="47%"]:after{right:-112.58px}.pace .pace-progress[data-progress-text="48%"]:after{right:-110.72px}.pace .pace-progress[data-progress-text="49%"]:after{right:-108.86px}.pace .pace-progress[data-progress-text="50%"]:after{right:-107px}.pace .pace-progress[data-progress-text="51%"]:after{right:-105.14px}.pace .pace-progress[data-progress-text="52%"]:after{right:-103.28px}.pace .pace-progress[data-progress-text="53%"]:after{right:-101.42px}.pace .pace-progress[data-progress-text="54%"]:after{right:-99.56px}.pace .pace-progress[data-progress-text="55%"]:after{right:-97.7px}.pace .pace-progress[data-progress-text="56%"]:after{right:-95.84px}.pace .pace-progress[data-progress-text="57%"]:after{right:-93.98px}.pace .pace-progress[data-progress-text="58%"]:after{right:-92.12px}.pace .pace-progress[data-progress-text="59%"]:after{right:-90.26px}.pace .pace-progress[data-progress-text="60%"]:after{right:-88.4px}.pace .pace-progress[data-progress-text="61%"]:after{right:-86.54px}.pace .pace-progress[data-progress-text="62%"]:after{right:-84.68px}.pace .pace-progress[data-progress-text="63%"]:after{right:-82.82px}.pace .pace-progress[data-progress-text="64%"]:after{right:-80.96px}.pace .pace-progress[data-progress-text="65%"]:after{right:-79.1px}.pace .pace-progress[data-progress-text="66%"]:after{right:-77.24px}.pace .pace-progress[data-progress-text="67%"]:after{right:-75.38px}.pace .pace-progress[data-progress-text="68%"]:after{right:-73.52px}.pace .pace-progress[data-progress-text="69%"]:after{right:-71.66px}.pace .pace-progress[data-progress-text="70%"]:after{right:-69.8px}.pace .pace-progress[data-progress-text="71%"]:after{right:-67.94px}.pace .pace-progress[data-progress-text="72%"]:after{right:-66.08px}.pace .pace-progress[data-progress-text="73%"]:after{right:-64.22px}.pace .pace-progress[data-progress-text="74%"]:after{right:-62.36px}.pace .pace-progress[data-progress-text="75%"]:after{right:-60.5px}.pace .pace-progress[data-progress-text="76%"]:after{right:-58.64px}.pace .pace-progress[data-progress-text="77%"]:after{right:-56.78px}.pace .pace-progress[data-progress-text="78%"]:after{right:-54.92px}.pace .pace-progress[data-progress-text="79%"]:after{right:-53.06px}.pace .pace-progress[data-progress-text="80%"]:after{right:-51.2px}.pace .pace-progress[data-progress-text="81%"]:after{right:-49.34px}.pace .pace-progress[data-progress-text="82%"]:after{right:-47.48px}.pace .pace-progress[data-progress-text="83%"]:after{right:-45.62px}.pace .pace-progress[data-progress-text="84%"]:after{right:-43.76px}.pace .pace-progress[data-progress-text="85%"]:after{right:-41.9px}.pace .pace-progress[data-progress-text="86%"]:after{right:-40.04px}.pace .pace-progress[data-progress-text="87%"]:after{right:-38.18px}.pace .pace-progress[data-progress-text="88%"]:after{right:-36.32px}.pace .pace-progress[data-progress-text="89%"]:after{right:-34.46px}.pace .pace-progress[data-progress-text="90%"]:after{right:-32.6px}.pace .pace-progress[data-progress-text="91%"]:after{right:-30.74px}.pace .pace-progress[data-progress-text="92%"]:after{right:-28.88px}.pace .pace-progress[data-progress-text="93%"]:after{right:-27.02px}.pace .pace-progress[data-progress-text="94%"]:after{right:-25.16px}.pace .pace-progress[data-progress-text="95%"]:after{right:-23.3px}.pace .pace-progress[data-progress-text="96%"]:after{right:-21.44px}.pace .pace-progress[data-progress-text="97%"]:after{right:-19.58px}.pace .pace-progress[data-progress-text="98%"]:after{right:-17.72px}.pace .pace-progress[data-progress-text="99%"]:after{right:-15.86px}.pace .pace-progress[data-progress-text="100%"]:after{right:-14px}.pace .pace-activity{position:absolute;width:100%;height:28px;z-index:2001;box-shadow:inset 0 0 0 2px #29d,inset 0 0 0 7px #FFF;border-radius:10px}.pace.pace-inactive{display:none}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-mac-osx.min.css</url>
    <content><![CDATA[.pace,.pace .pace-progress{width:100%;height:12px;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#0087E1;position:fixed;top:0;right:100%;-webkit-border-radius:0 0 4px;-moz-border-radius:0 0 4px;-o-border-radius:0 0 4px;border-radius:0 0 4px;-webkit-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-moz-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-o-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3)}.pace .pace-activity{right:-28px;bottom:0;-webkit-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-moz-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-o-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-webkit-background-size:28px 100%;-moz-background-size:28px 100%;-o-background-size:28px 100%;background-size:28px 100%;-webkit-animation:pace-theme-mac-osx-motion .5s linear infinite;-moz-animation:pace-theme-mac-osx-motion .5s linear infinite;-ms-animation:pace-theme-mac-osx-motion .5s linear infinite;-o-animation:pace-theme-mac-osx-motion .5s linear infinite;animation:pace-theme-mac-osx-motion .5s linear infinite}@-webkit-keyframes pace-theme-mac-osx-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-28px,0);transform:translate(-28px,0)}}@-moz-keyframes pace-theme-mac-osx-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-28px,0);transform:translate(-28px,0)}}@-o-keyframes pace-theme-mac-osx-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-28px,0);transform:translate(-28px,0)}}@-ms-keyframes pace-theme-mac-osx-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-28px,0);transform:translate(-28px,0)}}@keyframes pace-theme-mac-osx-motion{0%{transform:none}100%{transform:translate(-28px,0)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace.min.js</url>
    <content><![CDATA[/*! pace 1.0.2 */
(function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X=[].slice,Y={}.hasOwnProperty,Z=function(a,b){function c(){this.constructor=a}for(var d in b)Y.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},$=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};for(u={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:"body",elements:{checkInterval:100,selectors:["body"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:["GET"],trackWebSockets:!0,ignoreURLs:[]}},C=function(){var a;return null!=(a="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance.now():void 0)?a:+new Date},E=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,t=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==E&&(E=function(a){return setTimeout(a,50)},t=function(a){return clearTimeout(a)}),G=function(a){var b,c;return b=C(),(c=function(){var d;return d=C()-b,d>=33?(b=C(),a(d,function(){return E(c)})):setTimeout(c,33-d)})()},F=function(){var a,b,c;return c=arguments[0],b=arguments[1],a=3<=arguments.length?X.call(arguments,2):[],"function"==typeof c[b]?c[b].apply(c,a):c[b]},v=function(){var a,b,c,d,e,f,g;for(b=arguments[0],d=2<=arguments.length?X.call(arguments,1):[],f=0,g=d.length;g>f;f++)if(c=d[f])for(a in c)Y.call(c,a)&&(e=c[a],null!=b[a]&&"object"==typeof b[a]&&null!=e&&"object"==typeof e?v(b[a],e):b[a]=e);return b},q=function(a){var b,c,d,e,f;for(c=b=0,e=0,f=a.length;f>e;e++)d=a[e],c+=Math.abs(d),b++;return c/b},x=function(a,b){var c,d,e;if(null==a&&(a="options"),null==b&&(b=!0),e=document.querySelector("[data-pace-"+a+"]")){if(c=e.getAttribute("data-pace-"+a),!b)return c;try{return JSON.parse(c)}catch(f){return d=f,"undefined"!=typeof console&&null!==console?console.error("Error parsing inline pace options",d):void 0}}},g=function(){function a(){}return a.prototype.on=function(a,b,c,d){var e;return null==d&&(d=!1),null==this.bindings&&(this.bindings={}),null==(e=this.bindings)[a]&&(e[a]=[]),this.bindings[a].push({handler:b,ctx:c,once:d})},a.prototype.once=function(a,b,c){return this.on(a,b,c,!0)},a.prototype.off=function(a,b){var c,d,e;if(null!=(null!=(d=this.bindings)?d[a]:void 0)){if(null==b)return delete this.bindings[a];for(c=0,e=[];c<this.bindings[a].length;)e.push(this.bindings[a][c].handler===b?this.bindings[a].splice(c,1):c++);return e}},a.prototype.trigger=function(){var a,b,c,d,e,f,g,h,i;if(c=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],null!=(g=this.bindings)?g[c]:void 0){for(e=0,i=[];e<this.bindings[c].length;)h=this.bindings[c][e],d=h.handler,b=h.ctx,f=h.once,d.apply(null!=b?b:this,a),i.push(f?this.bindings[c].splice(e,1):e++);return i}},a}(),j=window.Pace||{},window.Pace=j,v(j,g.prototype),D=j.options=v({},u,window.paceOptions,x()),U=["ajax","document","eventLag","elements"],Q=0,S=U.length;S>Q;Q++)K=U[Q],D[K]===!0&&(D[K]=u[K]);i=function(a){function b(){return V=b.__super__.constructor.apply(this,arguments)}return Z(b,a),b}(Error),b=function(){function a(){this.progress=0}return a.prototype.getElement=function(){var a;if(null==this.el){if(a=document.querySelector(D.target),!a)throw new i;this.el=document.createElement("div"),this.el.className="pace pace-active",document.body.className=document.body.className.replace(/pace-done/g,""),document.body.className+=" pace-running",this.el.innerHTML='<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>',null!=a.firstChild?a.insertBefore(this.el,a.firstChild):a.appendChild(this.el)}return this.el},a.prototype.finish=function(){var a;return a=this.getElement(),a.className=a.className.replace("pace-active",""),a.className+=" pace-inactive",document.body.className=document.body.className.replace("pace-running",""),document.body.className+=" pace-done"},a.prototype.update=function(a){return this.progress=a,this.render()},a.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(a){i=a}return this.el=void 0},a.prototype.render=function(){var a,b,c,d,e,f,g;if(null==document.querySelector(D.target))return!1;for(a=this.getElement(),d="translate3d("+this.progress+"%, 0, 0)",g=["webkitTransform","msTransform","transform"],e=0,f=g.length;f>e;e++)b=g[e],a.children[0].style[b]=d;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(a.children[0].setAttribute("data-progress-text",""+(0|this.progress)+"%"),this.progress>=100?c="99":(c=this.progress<10?"0":"",c+=0|this.progress),a.children[0].setAttribute("data-progress",""+c)),this.lastRenderedProgress=this.progress},a.prototype.done=function(){return this.progress>=100},a}(),h=function(){function a(){this.bindings={}}return a.prototype.trigger=function(a,b){var c,d,e,f,g;if(null!=this.bindings[a]){for(f=this.bindings[a],g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(c.call(this,b));return g}},a.prototype.on=function(a,b){var c;return null==(c=this.bindings)[a]&&(c[a]=[]),this.bindings[a].push(b)},a}(),P=window.XMLHttpRequest,O=window.XDomainRequest,N=window.WebSocket,w=function(a,b){var c,d,e;e=[];for(d in b.prototype)try{e.push(null==a[d]&&"function"!=typeof b[d]?"function"==typeof Object.defineProperty?Object.defineProperty(a,d,{get:function(){return b.prototype[d]},configurable:!0,enumerable:!0}):a[d]=b.prototype[d]:void 0)}catch(f){c=f}return e},A=[],j.ignore=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift("ignore"),c=b.apply(null,a),A.shift(),c},j.track=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift("track"),c=b.apply(null,a),A.shift(),c},J=function(a){var b;if(null==a&&(a="GET"),"track"===A[0])return"force";if(!A.length&&D.ajax){if("socket"===a&&D.ajax.trackWebSockets)return!0;if(b=a.toUpperCase(),$.call(D.ajax.trackMethods,b)>=0)return!0}return!1},k=function(a){function b(){var a,c=this;b.__super__.constructor.apply(this,arguments),a=function(a){var b;return b=a.open,a.open=function(d,e){return J(d)&&c.trigger("request",{type:d,url:e,request:a}),b.apply(a,arguments)}},window.XMLHttpRequest=function(b){var c;return c=new P(b),a(c),c};try{w(window.XMLHttpRequest,P)}catch(d){}if(null!=O){window.XDomainRequest=function(){var b;return b=new O,a(b),b};try{w(window.XDomainRequest,O)}catch(d){}}if(null!=N&&D.ajax.trackWebSockets){window.WebSocket=function(a,b){var d;return d=null!=b?new N(a,b):new N(a),J("socket")&&c.trigger("request",{type:"socket",url:a,protocols:b,request:d}),d};try{w(window.WebSocket,N)}catch(d){}}}return Z(b,a),b}(h),R=null,y=function(){return null==R&&(R=new k),R},I=function(a){var b,c,d,e;for(e=D.ajax.ignoreURLs,c=0,d=e.length;d>c;c++)if(b=e[c],"string"==typeof b){if(-1!==a.indexOf(b))return!0}else if(b.test(a))return!0;return!1},y().on("request",function(b){var c,d,e,f,g;return f=b.type,e=b.request,g=b.url,I(g)?void 0:j.running||D.restartOnRequestAfter===!1&&"force"!==J(f)?void 0:(d=arguments,c=D.restartOnRequestAfter||0,"boolean"==typeof c&&(c=0),setTimeout(function(){var b,c,g,h,i,k;if(b="socket"===f?e.readyState<2:0<(h=e.readyState)&&4>h){for(j.restart(),i=j.sources,k=[],c=0,g=i.length;g>c;c++){if(K=i[c],K instanceof a){K.watch.apply(K,d);break}k.push(void 0)}return k}},c))}),a=function(){function a(){var a=this;this.elements=[],y().on("request",function(){return a.watch.apply(a,arguments)})}return a.prototype.watch=function(a){var b,c,d,e;return d=a.type,b=a.request,e=a.url,I(e)?void 0:(c="socket"===d?new n(b):new o(b),this.elements.push(c))},a}(),o=function(){function a(a){var b,c,d,e,f,g,h=this;if(this.progress=0,null!=window.ProgressEvent)for(c=null,a.addEventListener("progress",function(a){return h.progress=a.lengthComputable?100*a.loaded/a.total:h.progress+(100-h.progress)/2},!1),g=["load","abort","timeout","error"],d=0,e=g.length;e>d;d++)b=g[d],a.addEventListener(b,function(){return h.progress=100},!1);else f=a.onreadystatechange,a.onreadystatechange=function(){var b;return 0===(b=a.readyState)||4===b?h.progress=100:3===a.readyState&&(h.progress=50),"function"==typeof f?f.apply(null,arguments):void 0}}return a}(),n=function(){function a(a){var b,c,d,e,f=this;for(this.progress=0,e=["error","open"],c=0,d=e.length;d>c;c++)b=e[c],a.addEventListener(b,function(){return f.progress=100},!1)}return a}(),d=function(){function a(a){var b,c,d,f;for(null==a&&(a={}),this.elements=[],null==a.selectors&&(a.selectors=[]),f=a.selectors,c=0,d=f.length;d>c;c++)b=f[c],this.elements.push(new e(b))}return a}(),e=function(){function a(a){this.selector=a,this.progress=0,this.check()}return a.prototype.check=function(){var a=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return a.check()},D.elements.checkInterval)},a.prototype.done=function(){return this.progress=100},a}(),c=function(){function a(){var a,b,c=this;this.progress=null!=(b=this.states[document.readyState])?b:100,a=document.onreadystatechange,document.onreadystatechange=function(){return null!=c.states[document.readyState]&&(c.progress=c.states[document.readyState]),"function"==typeof a?a.apply(null,arguments):void 0}}return a.prototype.states={loading:0,interactive:50,complete:100},a}(),f=function(){function a(){var a,b,c,d,e,f=this;this.progress=0,a=0,e=[],d=0,c=C(),b=setInterval(function(){var g;return g=C()-c-50,c=C(),e.push(g),e.length>D.eventLag.sampleCount&&e.shift(),a=q(e),++d>=D.eventLag.minSamples&&a<D.eventLag.lagThreshold?(f.progress=100,clearInterval(b)):f.progress=100*(3/(a+3))},50)}return a}(),m=function(){function a(a){this.source=a,this.last=this.sinceLastUpdate=0,this.rate=D.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=F(this.source,"progress"))}return a.prototype.tick=function(a,b){var c;return null==b&&(b=F(this.source,"progress")),b>=100&&(this.done=!0),b===this.last?this.sinceLastUpdate+=a:(this.sinceLastUpdate&&(this.rate=(b-this.last)/this.sinceLastUpdate),this.catchup=(b-this.progress)/D.catchupTime,this.sinceLastUpdate=0,this.last=b),b>this.progress&&(this.progress+=this.catchup*a),c=1-Math.pow(this.progress/100,D.easeFactor),this.progress+=c*this.rate*a,this.progress=Math.min(this.lastProgress+D.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},a}(),L=null,H=null,r=null,M=null,p=null,s=null,j.running=!1,z=function(){return D.restartOnPushState?j.restart():void 0},null!=window.history.pushState&&(T=window.history.pushState,window.history.pushState=function(){return z(),T.apply(window.history,arguments)}),null!=window.history.replaceState&&(W=window.history.replaceState,window.history.replaceState=function(){return z(),W.apply(window.history,arguments)}),l={ajax:a,elements:d,document:c,eventLag:f},(B=function(){var a,c,d,e,f,g,h,i;for(j.sources=L=[],g=["ajax","elements","document","eventLag"],c=0,e=g.length;e>c;c++)a=g[c],D[a]!==!1&&L.push(new l[a](D[a]));for(i=null!=(h=D.extraSources)?h:[],d=0,f=i.length;f>d;d++)K=i[d],L.push(new K(D));return j.bar=r=new b,H=[],M=new m})(),j.stop=function(){return j.trigger("stop"),j.running=!1,r.destroy(),s=!0,null!=p&&("function"==typeof t&&t(p),p=null),B()},j.restart=function(){return j.trigger("restart"),j.stop(),j.start()},j.go=function(){var a;return j.running=!0,r.render(),a=C(),s=!1,p=G(function(b,c){var d,e,f,g,h,i,k,l,n,o,p,q,t,u,v,w;for(l=100-r.progress,e=p=0,f=!0,i=q=0,u=L.length;u>q;i=++q)for(K=L[i],o=null!=H[i]?H[i]:H[i]=[],h=null!=(w=K.elements)?w:[K],k=t=0,v=h.length;v>t;k=++t)g=h[k],n=null!=o[k]?o[k]:o[k]=new m(g),f&=n.done,n.done||(e++,p+=n.tick(b));return d=p/e,r.update(M.tick(b,d)),r.done()||f||s?(r.update(100),j.trigger("done"),setTimeout(function(){return r.finish(),j.running=!1,j.trigger("hide")},Math.max(D.ghostTime,Math.max(D.minTime-(C()-a),0)))):c()})},j.start=function(a){v(D,a),j.running=!0;try{r.render()}catch(b){i=b}return document.querySelector(".pace")?(j.trigger("start"),j.go()):setTimeout(j.start,50)},"function"==typeof define&&define.amd?define(["pace"],function(){return j}):"object"==typeof exports?module.exports=j:D.startOnPageLoad&&j.start()}).call(this);]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-minimal.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/blog/lib/pace/pace-theme-material.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:#29d}.pace-progress{position:fixed;z-index:2000;top:50%;left:50%;margin-left:-2.5rem;margin-top:-2.5rem;height:5rem;width:5rem;opacity:1;-webkit-transition:opacity .1s;transition:opacity .1s;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace-inactive .pace-progress,.pace-progress[data-progress="00"]{opacity:0}.pace-progress:after{height:5rem;width:5rem;text-align:center;line-height:5rem;content:attr(data-progress);display:block;font-size:1.8rem;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-weight:300}.pace-progress .pace-progress-inner{overflow:hidden;position:absolute;width:2.5rem;height:5rem;-webkit-transform-origin:left center;-ms-transform-origin:left center;transform-origin:left center;-webkit-transition:-webkit-transform .1s;transition:transform .1s;left:2.5rem;top:0}.pace-progress .pace-progress-inner:after,.pace-progress .pace-progress-inner:before{position:absolute;width:5rem;height:5rem;content:' ';left:-2.5rem;top:0;box-sizing:border-box;border:1px solid;border-radius:5rem}.pace-progress .pace-progress-inner:before{border-right-color:transparent;border-bottom-color:transparent;-webkit-transform:rotate(135deg);-ms-transform:rotate(135deg);transform:rotate(135deg)}.pace-progress .pace-progress-inner:after{border-left-color:transparent;border-top-color:transparent;display:none;-webkit-transform:rotate(315deg);-ms-transform:rotate(315deg);transform:rotate(315deg)}.pace-progress[data-progress="00"] .pace-progress-inner:before{-webkit-transform:rotate(-45deg);-ms-transform:rotate(-45deg);transform:rotate(-45deg)}.pace-progress[data-progress="01"] .pace-progress-inner:before{-webkit-transform:rotate(-41deg);-ms-transform:rotate(-41deg);transform:rotate(-41deg)}.pace-progress[data-progress="02"] .pace-progress-inner:before{-webkit-transform:rotate(-38deg);-ms-transform:rotate(-38deg);transform:rotate(-38deg)}.pace-progress[data-progress="03"] .pace-progress-inner:before{-webkit-transform:rotate(-34deg);-ms-transform:rotate(-34deg);transform:rotate(-34deg)}.pace-progress[data-progress="04"] .pace-progress-inner:before{-webkit-transform:rotate(-31deg);-ms-transform:rotate(-31deg);transform:rotate(-31deg)}.pace-progress[data-progress="05"] .pace-progress-inner:before{-webkit-transform:rotate(-27deg);-ms-transform:rotate(-27deg);transform:rotate(-27deg)}.pace-progress[data-progress="06"] .pace-progress-inner:before{-webkit-transform:rotate(-23deg);-ms-transform:rotate(-23deg);transform:rotate(-23deg)}.pace-progress[data-progress="07"] .pace-progress-inner:before{-webkit-transform:rotate(-20deg);-ms-transform:rotate(-20deg);transform:rotate(-20deg)}.pace-progress[data-progress="08"] .pace-progress-inner:before{-webkit-transform:rotate(-16deg);-ms-transform:rotate(-16deg);transform:rotate(-16deg)}.pace-progress[data-progress="09"] .pace-progress-inner:before{-webkit-transform:rotate(-13deg);-ms-transform:rotate(-13deg);transform:rotate(-13deg)}.pace-progress[data-progress="10"] .pace-progress-inner:before{-webkit-transform:rotate(-9deg);-ms-transform:rotate(-9deg);transform:rotate(-9deg)}.pace-progress[data-progress="11"] .pace-progress-inner:before{-webkit-transform:rotate(-5deg);-ms-transform:rotate(-5deg);transform:rotate(-5deg)}.pace-progress[data-progress="12"] .pace-progress-inner:before{-webkit-transform:rotate(-2deg);-ms-transform:rotate(-2deg);transform:rotate(-2deg)}.pace-progress[data-progress="13"] .pace-progress-inner:before{-webkit-transform:rotate(2deg);-ms-transform:rotate(2deg);transform:rotate(2deg)}.pace-progress[data-progress="14"] .pace-progress-inner:before{-webkit-transform:rotate(5deg);-ms-transform:rotate(5deg);transform:rotate(5deg)}.pace-progress[data-progress="15"] .pace-progress-inner:before{-webkit-transform:rotate(9deg);-ms-transform:rotate(9deg);transform:rotate(9deg)}.pace-progress[data-progress="16"] .pace-progress-inner:before{-webkit-transform:rotate(13deg);-ms-transform:rotate(13deg);transform:rotate(13deg)}.pace-progress[data-progress="17"] .pace-progress-inner:before{-webkit-transform:rotate(16deg);-ms-transform:rotate(16deg);transform:rotate(16deg)}.pace-progress[data-progress="18"] .pace-progress-inner:before{-webkit-transform:rotate(20deg);-ms-transform:rotate(20deg);transform:rotate(20deg)}.pace-progress[data-progress="19"] .pace-progress-inner:before{-webkit-transform:rotate(23deg);-ms-transform:rotate(23deg);transform:rotate(23deg)}.pace-progress[data-progress="20"] .pace-progress-inner:before{-webkit-transform:rotate(27deg);-ms-transform:rotate(27deg);transform:rotate(27deg)}.pace-progress[data-progress="21"] .pace-progress-inner:before{-webkit-transform:rotate(31deg);-ms-transform:rotate(31deg);transform:rotate(31deg)}.pace-progress[data-progress="22"] .pace-progress-inner:before{-webkit-transform:rotate(34deg);-ms-transform:rotate(34deg);transform:rotate(34deg)}.pace-progress[data-progress="23"] .pace-progress-inner:before{-webkit-transform:rotate(38deg);-ms-transform:rotate(38deg);transform:rotate(38deg)}.pace-progress[data-progress="24"] .pace-progress-inner:before{-webkit-transform:rotate(41deg);-ms-transform:rotate(41deg);transform:rotate(41deg)}.pace-progress[data-progress="25"] .pace-progress-inner:before{-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);transform:rotate(45deg)}.pace-progress[data-progress="26"] .pace-progress-inner:before{-webkit-transform:rotate(49deg);-ms-transform:rotate(49deg);transform:rotate(49deg)}.pace-progress[data-progress="27"] .pace-progress-inner:before{-webkit-transform:rotate(52deg);-ms-transform:rotate(52deg);transform:rotate(52deg)}.pace-progress[data-progress="28"] .pace-progress-inner:before{-webkit-transform:rotate(56deg);-ms-transform:rotate(56deg);transform:rotate(56deg)}.pace-progress[data-progress="29"] .pace-progress-inner:before{-webkit-transform:rotate(59deg);-ms-transform:rotate(59deg);transform:rotate(59deg)}.pace-progress[data-progress="30"] .pace-progress-inner:before{-webkit-transform:rotate(63deg);-ms-transform:rotate(63deg);transform:rotate(63deg)}.pace-progress[data-progress="31"] .pace-progress-inner:before{-webkit-transform:rotate(67deg);-ms-transform:rotate(67deg);transform:rotate(67deg)}.pace-progress[data-progress="32"] .pace-progress-inner:before{-webkit-transform:rotate(70deg);-ms-transform:rotate(70deg);transform:rotate(70deg)}.pace-progress[data-progress="33"] .pace-progress-inner:before{-webkit-transform:rotate(74deg);-ms-transform:rotate(74deg);transform:rotate(74deg)}.pace-progress[data-progress="34"] .pace-progress-inner:before{-webkit-transform:rotate(77deg);-ms-transform:rotate(77deg);transform:rotate(77deg)}.pace-progress[data-progress="35"] .pace-progress-inner:before{-webkit-transform:rotate(81deg);-ms-transform:rotate(81deg);transform:rotate(81deg)}.pace-progress[data-progress="36"] .pace-progress-inner:before{-webkit-transform:rotate(85deg);-ms-transform:rotate(85deg);transform:rotate(85deg)}.pace-progress[data-progress="37"] .pace-progress-inner:before{-webkit-transform:rotate(88deg);-ms-transform:rotate(88deg);transform:rotate(88deg)}.pace-progress[data-progress="38"] .pace-progress-inner:before{-webkit-transform:rotate(92deg);-ms-transform:rotate(92deg);transform:rotate(92deg)}.pace-progress[data-progress="39"] .pace-progress-inner:before{-webkit-transform:rotate(95deg);-ms-transform:rotate(95deg);transform:rotate(95deg)}.pace-progress[data-progress="40"] .pace-progress-inner:before{-webkit-transform:rotate(99deg);-ms-transform:rotate(99deg);transform:rotate(99deg)}.pace-progress[data-progress="41"] .pace-progress-inner:before{-webkit-transform:rotate(103deg);-ms-transform:rotate(103deg);transform:rotate(103deg)}.pace-progress[data-progress="42"] .pace-progress-inner:before{-webkit-transform:rotate(106deg);-ms-transform:rotate(106deg);transform:rotate(106deg)}.pace-progress[data-progress="43"] .pace-progress-inner:before{-webkit-transform:rotate(110deg);-ms-transform:rotate(110deg);transform:rotate(110deg)}.pace-progress[data-progress="44"] .pace-progress-inner:before{-webkit-transform:rotate(113deg);-ms-transform:rotate(113deg);transform:rotate(113deg)}.pace-progress[data-progress="45"] .pace-progress-inner:before{-webkit-transform:rotate(117deg);-ms-transform:rotate(117deg);transform:rotate(117deg)}.pace-progress[data-progress="46"] .pace-progress-inner:before{-webkit-transform:rotate(121deg);-ms-transform:rotate(121deg);transform:rotate(121deg)}.pace-progress[data-progress="47"] .pace-progress-inner:before{-webkit-transform:rotate(124deg);-ms-transform:rotate(124deg);transform:rotate(124deg)}.pace-progress[data-progress="48"] .pace-progress-inner:before{-webkit-transform:rotate(128deg);-ms-transform:rotate(128deg);transform:rotate(128deg)}.pace-progress[data-progress="49"] .pace-progress-inner:before{-webkit-transform:rotate(131deg);-ms-transform:rotate(131deg);transform:rotate(131deg)}.pace-progress[data-progress="50"] .pace-progress-inner:before{-webkit-transform:rotate(135deg);-ms-transform:rotate(135deg);transform:rotate(135deg)}.pace-progress[data-progress="50"] .pace-progress-inner:after{-webkit-transform:rotate(315deg);-ms-transform:rotate(315deg);transform:rotate(315deg);display:block}.pace-progress[data-progress="51"] .pace-progress-inner:after{-webkit-transform:rotate(319deg);-ms-transform:rotate(319deg);transform:rotate(319deg);display:block}.pace-progress[data-progress="52"] .pace-progress-inner:after{-webkit-transform:rotate(322deg);-ms-transform:rotate(322deg);transform:rotate(322deg);display:block}.pace-progress[data-progress="53"] .pace-progress-inner:after{-webkit-transform:rotate(326deg);-ms-transform:rotate(326deg);transform:rotate(326deg);display:block}.pace-progress[data-progress="54"] .pace-progress-inner:after{-webkit-transform:rotate(329deg);-ms-transform:rotate(329deg);transform:rotate(329deg);display:block}.pace-progress[data-progress="55"] .pace-progress-inner:after{-webkit-transform:rotate(333deg);-ms-transform:rotate(333deg);transform:rotate(333deg);display:block}.pace-progress[data-progress="56"] .pace-progress-inner:after{-webkit-transform:rotate(337deg);-ms-transform:rotate(337deg);transform:rotate(337deg);display:block}.pace-progress[data-progress="57"] .pace-progress-inner:after{-webkit-transform:rotate(340deg);-ms-transform:rotate(340deg);transform:rotate(340deg);display:block}.pace-progress[data-progress="58"] .pace-progress-inner:after{-webkit-transform:rotate(344deg);-ms-transform:rotate(344deg);transform:rotate(344deg);display:block}.pace-progress[data-progress="59"] .pace-progress-inner:after{-webkit-transform:rotate(347deg);-ms-transform:rotate(347deg);transform:rotate(347deg);display:block}.pace-progress[data-progress="60"] .pace-progress-inner:after{-webkit-transform:rotate(351deg);-ms-transform:rotate(351deg);transform:rotate(351deg);display:block}.pace-progress[data-progress="61"] .pace-progress-inner:after{-webkit-transform:rotate(355deg);-ms-transform:rotate(355deg);transform:rotate(355deg);display:block}.pace-progress[data-progress="62"] .pace-progress-inner:after{-webkit-transform:rotate(358deg);-ms-transform:rotate(358deg);transform:rotate(358deg);display:block}.pace-progress[data-progress="63"] .pace-progress-inner:after{-webkit-transform:rotate(362deg);-ms-transform:rotate(362deg);transform:rotate(362deg);display:block}.pace-progress[data-progress="64"] .pace-progress-inner:after{-webkit-transform:rotate(365deg);-ms-transform:rotate(365deg);transform:rotate(365deg);display:block}.pace-progress[data-progress="65"] .pace-progress-inner:after{-webkit-transform:rotate(369deg);-ms-transform:rotate(369deg);transform:rotate(369deg);display:block}.pace-progress[data-progress="66"] .pace-progress-inner:after{-webkit-transform:rotate(373deg);-ms-transform:rotate(373deg);transform:rotate(373deg);display:block}.pace-progress[data-progress="67"] .pace-progress-inner:after{-webkit-transform:rotate(376deg);-ms-transform:rotate(376deg);transform:rotate(376deg);display:block}.pace-progress[data-progress="68"] .pace-progress-inner:after{-webkit-transform:rotate(380deg);-ms-transform:rotate(380deg);transform:rotate(380deg);display:block}.pace-progress[data-progress="69"] .pace-progress-inner:after{-webkit-transform:rotate(383deg);-ms-transform:rotate(383deg);transform:rotate(383deg);display:block}.pace-progress[data-progress="70"] .pace-progress-inner:after{-webkit-transform:rotate(387deg);-ms-transform:rotate(387deg);transform:rotate(387deg);display:block}.pace-progress[data-progress="71"] .pace-progress-inner:after{-webkit-transform:rotate(391deg);-ms-transform:rotate(391deg);transform:rotate(391deg);display:block}.pace-progress[data-progress="72"] .pace-progress-inner:after{-webkit-transform:rotate(394deg);-ms-transform:rotate(394deg);transform:rotate(394deg);display:block}.pace-progress[data-progress="73"] .pace-progress-inner:after{-webkit-transform:rotate(398deg);-ms-transform:rotate(398deg);transform:rotate(398deg);display:block}.pace-progress[data-progress="74"] .pace-progress-inner:after{-webkit-transform:rotate(401deg);-ms-transform:rotate(401deg);transform:rotate(401deg);display:block}.pace-progress[data-progress="75"] .pace-progress-inner:after{-webkit-transform:rotate(405deg);-ms-transform:rotate(405deg);transform:rotate(405deg);display:block}.pace-progress[data-progress="76"] .pace-progress-inner:after{-webkit-transform:rotate(409deg);-ms-transform:rotate(409deg);transform:rotate(409deg);display:block}.pace-progress[data-progress="77"] .pace-progress-inner:after{-webkit-transform:rotate(412deg);-ms-transform:rotate(412deg);transform:rotate(412deg);display:block}.pace-progress[data-progress="78"] .pace-progress-inner:after{-webkit-transform:rotate(416deg);-ms-transform:rotate(416deg);transform:rotate(416deg);display:block}.pace-progress[data-progress="79"] .pace-progress-inner:after{-webkit-transform:rotate(419deg);-ms-transform:rotate(419deg);transform:rotate(419deg);display:block}.pace-progress[data-progress="80"] .pace-progress-inner:after{-webkit-transform:rotate(423deg);-ms-transform:rotate(423deg);transform:rotate(423deg);display:block}.pace-progress[data-progress="81"] .pace-progress-inner:after{-webkit-transform:rotate(427deg);-ms-transform:rotate(427deg);transform:rotate(427deg);display:block}.pace-progress[data-progress="82"] .pace-progress-inner:after{-webkit-transform:rotate(430deg);-ms-transform:rotate(430deg);transform:rotate(430deg);display:block}.pace-progress[data-progress="83"] .pace-progress-inner:after{-webkit-transform:rotate(434deg);-ms-transform:rotate(434deg);transform:rotate(434deg);display:block}.pace-progress[data-progress="84"] .pace-progress-inner:after{-webkit-transform:rotate(437deg);-ms-transform:rotate(437deg);transform:rotate(437deg);display:block}.pace-progress[data-progress="85"] .pace-progress-inner:after{-webkit-transform:rotate(441deg);-ms-transform:rotate(441deg);transform:rotate(441deg);display:block}.pace-progress[data-progress="86"] .pace-progress-inner:after{-webkit-transform:rotate(445deg);-ms-transform:rotate(445deg);transform:rotate(445deg);display:block}.pace-progress[data-progress="87"] .pace-progress-inner:after{-webkit-transform:rotate(448deg);-ms-transform:rotate(448deg);transform:rotate(448deg);display:block}.pace-progress[data-progress="88"] .pace-progress-inner:after{-webkit-transform:rotate(452deg);-ms-transform:rotate(452deg);transform:rotate(452deg);display:block}.pace-progress[data-progress="89"] .pace-progress-inner:after{-webkit-transform:rotate(455deg);-ms-transform:rotate(455deg);transform:rotate(455deg);display:block}.pace-progress[data-progress="90"] .pace-progress-inner:after{-webkit-transform:rotate(459deg);-ms-transform:rotate(459deg);transform:rotate(459deg);display:block}.pace-progress[data-progress="91"] .pace-progress-inner:after{-webkit-transform:rotate(463deg);-ms-transform:rotate(463deg);transform:rotate(463deg);display:block}.pace-progress[data-progress="92"] .pace-progress-inner:after{-webkit-transform:rotate(466deg);-ms-transform:rotate(466deg);transform:rotate(466deg);display:block}.pace-progress[data-progress="93"] .pace-progress-inner:after{-webkit-transform:rotate(470deg);-ms-transform:rotate(470deg);transform:rotate(470deg);display:block}.pace-progress[data-progress="94"] .pace-progress-inner:after{-webkit-transform:rotate(473deg);-ms-transform:rotate(473deg);transform:rotate(473deg);display:block}.pace-progress[data-progress="95"] .pace-progress-inner:after{-webkit-transform:rotate(477deg);-ms-transform:rotate(477deg);transform:rotate(477deg);display:block}.pace-progress[data-progress="96"] .pace-progress-inner:after{-webkit-transform:rotate(481deg);-ms-transform:rotate(481deg);transform:rotate(481deg);display:block}.pace-progress[data-progress="97"] .pace-progress-inner:after{-webkit-transform:rotate(484deg);-ms-transform:rotate(484deg);transform:rotate(484deg);display:block}.pace-progress[data-progress="98"] .pace-progress-inner:after{-webkit-transform:rotate(488deg);-ms-transform:rotate(488deg);transform:rotate(488deg);display:block}.pace-progress[data-progress="99"] .pace-progress-inner:after{-webkit-transform:rotate(491deg);-ms-transform:rotate(491deg);transform:rotate(491deg);display:block}.pace-progress[data-progress="100"] .pace-progress-inner:after{-webkit-transform:rotate(495deg);-ms-transform:rotate(495deg);transform:rotate(495deg);display:block}.pace-progress[data-progress="00"] .pace-progress-inner{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0)}.pace-progress[data-progress="01"] .pace-progress-inner{-webkit-transform:rotate(4deg);-ms-transform:rotate(4deg);transform:rotate(4deg)}.pace-progress[data-progress="02"] .pace-progress-inner{-webkit-transform:rotate(7deg);-ms-transform:rotate(7deg);transform:rotate(7deg)}.pace-progress[data-progress="03"] .pace-progress-inner{-webkit-transform:rotate(11deg);-ms-transform:rotate(11deg);transform:rotate(11deg)}.pace-progress[data-progress="04"] .pace-progress-inner{-webkit-transform:rotate(14deg);-ms-transform:rotate(14deg);transform:rotate(14deg)}.pace-progress[data-progress="05"] .pace-progress-inner{-webkit-transform:rotate(18deg);-ms-transform:rotate(18deg);transform:rotate(18deg)}.pace-progress[data-progress="06"] .pace-progress-inner{-webkit-transform:rotate(22deg);-ms-transform:rotate(22deg);transform:rotate(22deg)}.pace-progress[data-progress="07"] .pace-progress-inner{-webkit-transform:rotate(25deg);-ms-transform:rotate(25deg);transform:rotate(25deg)}.pace-progress[data-progress="08"] .pace-progress-inner{-webkit-transform:rotate(29deg);-ms-transform:rotate(29deg);transform:rotate(29deg)}.pace-progress[data-progress="09"] .pace-progress-inner{-webkit-transform:rotate(32deg);-ms-transform:rotate(32deg);transform:rotate(32deg)}.pace-progress[data-progress="10"] .pace-progress-inner{-webkit-transform:rotate(36deg);-ms-transform:rotate(36deg);transform:rotate(36deg)}.pace-progress[data-progress="11"] .pace-progress-inner{-webkit-transform:rotate(40deg);-ms-transform:rotate(40deg);transform:rotate(40deg)}.pace-progress[data-progress="12"] .pace-progress-inner{-webkit-transform:rotate(43deg);-ms-transform:rotate(43deg);transform:rotate(43deg)}.pace-progress[data-progress="13"] .pace-progress-inner{-webkit-transform:rotate(47deg);-ms-transform:rotate(47deg);transform:rotate(47deg)}.pace-progress[data-progress="14"] .pace-progress-inner{-webkit-transform:rotate(50deg);-ms-transform:rotate(50deg);transform:rotate(50deg)}.pace-progress[data-progress="15"] .pace-progress-inner{-webkit-transform:rotate(54deg);-ms-transform:rotate(54deg);transform:rotate(54deg)}.pace-progress[data-progress="16"] .pace-progress-inner{-webkit-transform:rotate(58deg);-ms-transform:rotate(58deg);transform:rotate(58deg)}.pace-progress[data-progress="17"] .pace-progress-inner{-webkit-transform:rotate(61deg);-ms-transform:rotate(61deg);transform:rotate(61deg)}.pace-progress[data-progress="18"] .pace-progress-inner{-webkit-transform:rotate(65deg);-ms-transform:rotate(65deg);transform:rotate(65deg)}.pace-progress[data-progress="19"] .pace-progress-inner{-webkit-transform:rotate(68deg);-ms-transform:rotate(68deg);transform:rotate(68deg)}.pace-progress[data-progress="20"] .pace-progress-inner{-webkit-transform:rotate(72deg);-ms-transform:rotate(72deg);transform:rotate(72deg)}.pace-progress[data-progress="21"] .pace-progress-inner{-webkit-transform:rotate(76deg);-ms-transform:rotate(76deg);transform:rotate(76deg)}.pace-progress[data-progress="22"] .pace-progress-inner{-webkit-transform:rotate(79deg);-ms-transform:rotate(79deg);transform:rotate(79deg)}.pace-progress[data-progress="23"] .pace-progress-inner{-webkit-transform:rotate(83deg);-ms-transform:rotate(83deg);transform:rotate(83deg)}.pace-progress[data-progress="24"] .pace-progress-inner{-webkit-transform:rotate(86deg);-ms-transform:rotate(86deg);transform:rotate(86deg)}.pace-progress[data-progress="25"] .pace-progress-inner{-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}.pace-progress[data-progress="26"] .pace-progress-inner{-webkit-transform:rotate(94deg);-ms-transform:rotate(94deg);transform:rotate(94deg)}.pace-progress[data-progress="27"] .pace-progress-inner{-webkit-transform:rotate(97deg);-ms-transform:rotate(97deg);transform:rotate(97deg)}.pace-progress[data-progress="28"] .pace-progress-inner{-webkit-transform:rotate(101deg);-ms-transform:rotate(101deg);transform:rotate(101deg)}.pace-progress[data-progress="29"] .pace-progress-inner{-webkit-transform:rotate(104deg);-ms-transform:rotate(104deg);transform:rotate(104deg)}.pace-progress[data-progress="30"] .pace-progress-inner{-webkit-transform:rotate(108deg);-ms-transform:rotate(108deg);transform:rotate(108deg)}.pace-progress[data-progress="31"] .pace-progress-inner{-webkit-transform:rotate(112deg);-ms-transform:rotate(112deg);transform:rotate(112deg)}.pace-progress[data-progress="32"] .pace-progress-inner{-webkit-transform:rotate(115deg);-ms-transform:rotate(115deg);transform:rotate(115deg)}.pace-progress[data-progress="33"] .pace-progress-inner{-webkit-transform:rotate(119deg);-ms-transform:rotate(119deg);transform:rotate(119deg)}.pace-progress[data-progress="34"] .pace-progress-inner{-webkit-transform:rotate(122deg);-ms-transform:rotate(122deg);transform:rotate(122deg)}.pace-progress[data-progress="35"] .pace-progress-inner{-webkit-transform:rotate(126deg);-ms-transform:rotate(126deg);transform:rotate(126deg)}.pace-progress[data-progress="36"] .pace-progress-inner{-webkit-transform:rotate(130deg);-ms-transform:rotate(130deg);transform:rotate(130deg)}.pace-progress[data-progress="37"] .pace-progress-inner{-webkit-transform:rotate(133deg);-ms-transform:rotate(133deg);transform:rotate(133deg)}.pace-progress[data-progress="38"] .pace-progress-inner{-webkit-transform:rotate(137deg);-ms-transform:rotate(137deg);transform:rotate(137deg)}.pace-progress[data-progress="39"] .pace-progress-inner{-webkit-transform:rotate(140deg);-ms-transform:rotate(140deg);transform:rotate(140deg)}.pace-progress[data-progress="40"] .pace-progress-inner{-webkit-transform:rotate(144deg);-ms-transform:rotate(144deg);transform:rotate(144deg)}.pace-progress[data-progress="41"] .pace-progress-inner{-webkit-transform:rotate(148deg);-ms-transform:rotate(148deg);transform:rotate(148deg)}.pace-progress[data-progress="42"] .pace-progress-inner{-webkit-transform:rotate(151deg);-ms-transform:rotate(151deg);transform:rotate(151deg)}.pace-progress[data-progress="43"] .pace-progress-inner{-webkit-transform:rotate(155deg);-ms-transform:rotate(155deg);transform:rotate(155deg)}.pace-progress[data-progress="44"] .pace-progress-inner{-webkit-transform:rotate(158deg);-ms-transform:rotate(158deg);transform:rotate(158deg)}.pace-progress[data-progress="45"] .pace-progress-inner{-webkit-transform:rotate(162deg);-ms-transform:rotate(162deg);transform:rotate(162deg)}.pace-progress[data-progress="46"] .pace-progress-inner{-webkit-transform:rotate(166deg);-ms-transform:rotate(166deg);transform:rotate(166deg)}.pace-progress[data-progress="47"] .pace-progress-inner{-webkit-transform:rotate(169deg);-ms-transform:rotate(169deg);transform:rotate(169deg)}.pace-progress[data-progress="48"] .pace-progress-inner{-webkit-transform:rotate(173deg);-ms-transform:rotate(173deg);transform:rotate(173deg)}.pace-progress[data-progress="49"] .pace-progress-inner{-webkit-transform:rotate(176deg);-ms-transform:rotate(176deg);transform:rotate(176deg)}.pace-progress[data-progress="50"] .pace-progress-inner{-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}.pace-progress[data-progress="51"] .pace-progress-inner{-webkit-transform:rotate(184deg);-ms-transform:rotate(184deg);transform:rotate(184deg);overflow:visible}.pace-progress[data-progress="52"] .pace-progress-inner{-webkit-transform:rotate(187deg);-ms-transform:rotate(187deg);transform:rotate(187deg);overflow:visible}.pace-progress[data-progress="53"] .pace-progress-inner{-webkit-transform:rotate(191deg);-ms-transform:rotate(191deg);transform:rotate(191deg);overflow:visible}.pace-progress[data-progress="54"] .pace-progress-inner{-webkit-transform:rotate(194deg);-ms-transform:rotate(194deg);transform:rotate(194deg);overflow:visible}.pace-progress[data-progress="55"] .pace-progress-inner{-webkit-transform:rotate(198deg);-ms-transform:rotate(198deg);transform:rotate(198deg);overflow:visible}.pace-progress[data-progress="56"] .pace-progress-inner{-webkit-transform:rotate(202deg);-ms-transform:rotate(202deg);transform:rotate(202deg);overflow:visible}.pace-progress[data-progress="57"] .pace-progress-inner{-webkit-transform:rotate(205deg);-ms-transform:rotate(205deg);transform:rotate(205deg);overflow:visible}.pace-progress[data-progress="58"] .pace-progress-inner{-webkit-transform:rotate(209deg);-ms-transform:rotate(209deg);transform:rotate(209deg);overflow:visible}.pace-progress[data-progress="59"] .pace-progress-inner{-webkit-transform:rotate(212deg);-ms-transform:rotate(212deg);transform:rotate(212deg);overflow:visible}.pace-progress[data-progress="60"] .pace-progress-inner{-webkit-transform:rotate(216deg);-ms-transform:rotate(216deg);transform:rotate(216deg);overflow:visible}.pace-progress[data-progress="61"] .pace-progress-inner{-webkit-transform:rotate(220deg);-ms-transform:rotate(220deg);transform:rotate(220deg);overflow:visible}.pace-progress[data-progress="62"] .pace-progress-inner{-webkit-transform:rotate(223deg);-ms-transform:rotate(223deg);transform:rotate(223deg);overflow:visible}.pace-progress[data-progress="63"] .pace-progress-inner{-webkit-transform:rotate(227deg);-ms-transform:rotate(227deg);transform:rotate(227deg);overflow:visible}.pace-progress[data-progress="64"] .pace-progress-inner{-webkit-transform:rotate(230deg);-ms-transform:rotate(230deg);transform:rotate(230deg);overflow:visible}.pace-progress[data-progress="65"] .pace-progress-inner{-webkit-transform:rotate(234deg);-ms-transform:rotate(234deg);transform:rotate(234deg);overflow:visible}.pace-progress[data-progress="66"] .pace-progress-inner{-webkit-transform:rotate(238deg);-ms-transform:rotate(238deg);transform:rotate(238deg);overflow:visible}.pace-progress[data-progress="67"] .pace-progress-inner{-webkit-transform:rotate(241deg);-ms-transform:rotate(241deg);transform:rotate(241deg);overflow:visible}.pace-progress[data-progress="68"] .pace-progress-inner{-webkit-transform:rotate(245deg);-ms-transform:rotate(245deg);transform:rotate(245deg);overflow:visible}.pace-progress[data-progress="69"] .pace-progress-inner{-webkit-transform:rotate(248deg);-ms-transform:rotate(248deg);transform:rotate(248deg);overflow:visible}.pace-progress[data-progress="70"] .pace-progress-inner{-webkit-transform:rotate(252deg);-ms-transform:rotate(252deg);transform:rotate(252deg);overflow:visible}.pace-progress[data-progress="71"] .pace-progress-inner{-webkit-transform:rotate(256deg);-ms-transform:rotate(256deg);transform:rotate(256deg);overflow:visible}.pace-progress[data-progress="72"] .pace-progress-inner{-webkit-transform:rotate(259deg);-ms-transform:rotate(259deg);transform:rotate(259deg);overflow:visible}.pace-progress[data-progress="73"] .pace-progress-inner{-webkit-transform:rotate(263deg);-ms-transform:rotate(263deg);transform:rotate(263deg);overflow:visible}.pace-progress[data-progress="74"] .pace-progress-inner{-webkit-transform:rotate(266deg);-ms-transform:rotate(266deg);transform:rotate(266deg);overflow:visible}.pace-progress[data-progress="75"] .pace-progress-inner{-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg);overflow:visible}.pace-progress[data-progress="76"] .pace-progress-inner{-webkit-transform:rotate(274deg);-ms-transform:rotate(274deg);transform:rotate(274deg);overflow:visible}.pace-progress[data-progress="77"] .pace-progress-inner{-webkit-transform:rotate(277deg);-ms-transform:rotate(277deg);transform:rotate(277deg);overflow:visible}.pace-progress[data-progress="78"] .pace-progress-inner{-webkit-transform:rotate(281deg);-ms-transform:rotate(281deg);transform:rotate(281deg);overflow:visible}.pace-progress[data-progress="79"] .pace-progress-inner{-webkit-transform:rotate(284deg);-ms-transform:rotate(284deg);transform:rotate(284deg);overflow:visible}.pace-progress[data-progress="80"] .pace-progress-inner{-webkit-transform:rotate(288deg);-ms-transform:rotate(288deg);transform:rotate(288deg);overflow:visible}.pace-progress[data-progress="81"] .pace-progress-inner{-webkit-transform:rotate(292deg);-ms-transform:rotate(292deg);transform:rotate(292deg);overflow:visible}.pace-progress[data-progress="82"] .pace-progress-inner{-webkit-transform:rotate(295deg);-ms-transform:rotate(295deg);transform:rotate(295deg);overflow:visible}.pace-progress[data-progress="83"] .pace-progress-inner{-webkit-transform:rotate(299deg);-ms-transform:rotate(299deg);transform:rotate(299deg);overflow:visible}.pace-progress[data-progress="84"] .pace-progress-inner{-webkit-transform:rotate(302deg);-ms-transform:rotate(302deg);transform:rotate(302deg);overflow:visible}.pace-progress[data-progress="85"] .pace-progress-inner{-webkit-transform:rotate(306deg);-ms-transform:rotate(306deg);transform:rotate(306deg);overflow:visible}.pace-progress[data-progress="86"] .pace-progress-inner{-webkit-transform:rotate(310deg);-ms-transform:rotate(310deg);transform:rotate(310deg);overflow:visible}.pace-progress[data-progress="87"] .pace-progress-inner{-webkit-transform:rotate(313deg);-ms-transform:rotate(313deg);transform:rotate(313deg);overflow:visible}.pace-progress[data-progress="88"] .pace-progress-inner{-webkit-transform:rotate(317deg);-ms-transform:rotate(317deg);transform:rotate(317deg);overflow:visible}.pace-progress[data-progress="89"] .pace-progress-inner{-webkit-transform:rotate(320deg);-ms-transform:rotate(320deg);transform:rotate(320deg);overflow:visible}.pace-progress[data-progress="90"] .pace-progress-inner{-webkit-transform:rotate(324deg);-ms-transform:rotate(324deg);transform:rotate(324deg);overflow:visible}.pace-progress[data-progress="91"] .pace-progress-inner{-webkit-transform:rotate(328deg);-ms-transform:rotate(328deg);transform:rotate(328deg);overflow:visible}.pace-progress[data-progress="92"] .pace-progress-inner{-webkit-transform:rotate(331deg);-ms-transform:rotate(331deg);transform:rotate(331deg);overflow:visible}.pace-progress[data-progress="93"] .pace-progress-inner{-webkit-transform:rotate(335deg);-ms-transform:rotate(335deg);transform:rotate(335deg);overflow:visible}.pace-progress[data-progress="94"] .pace-progress-inner{-webkit-transform:rotate(338deg);-ms-transform:rotate(338deg);transform:rotate(338deg);overflow:visible}.pace-progress[data-progress="95"] .pace-progress-inner{-webkit-transform:rotate(342deg);-ms-transform:rotate(342deg);transform:rotate(342deg);overflow:visible}.pace-progress[data-progress="96"] .pace-progress-inner{-webkit-transform:rotate(346deg);-ms-transform:rotate(346deg);transform:rotate(346deg);overflow:visible}.pace-progress[data-progress="97"] .pace-progress-inner{-webkit-transform:rotate(349deg);-ms-transform:rotate(349deg);transform:rotate(349deg);overflow:visible}.pace-progress[data-progress="98"] .pace-progress-inner{-webkit-transform:rotate(353deg);-ms-transform:rotate(353deg);transform:rotate(353deg);overflow:visible}.pace-progress[data-progress="99"] .pace-progress-inner{-webkit-transform:rotate(356deg);-ms-transform:rotate(356deg);transform:rotate(356deg);overflow:visible}.pace-progress[data-progress="100"] .pace-progress-inner{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);overflow:visible}
]]></content>
  </entry>
</search>
